var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,0.813,1,2.094]],["body/controllers/AppController.html",[0,1.289,1,3.319,2,1.419,3,0.429,4,0.429,5,0.377,6,3.417,7,0.429,8,1.642,9,5.867,10,5.123,11,1.978,12,0.031,13,5.123,14,1.028,15,4.085,16,1.419,17,1.419,18,0.54,19,1.116,20,0.869,21,1.31,22,0.588,23,0.662,24,2.976,25,2.647,26,4.085,27,5.123,28,0.429,29,0.728,30,1.209,31,2.166,32,0.024,33,0.024]],["title/modules/AppModule.html",[34,1.713,35,2.094]],["body/modules/AppModule.html",[2,1.281,3,0.265,4,0.265,5,0.232,12,0.032,22,0.655,23,0.409,28,0.265,29,0.449,32,0.018,33,0.018,34,1.955,35,4.162,36,1.337,37,2.153,38,2.109,39,2.109,40,2.109,41,2.109,42,3.114,43,2.908,44,2.828,45,2.828,46,2.369,47,2.369,48,2.369,49,1.579,50,2.179,51,2.179,52,2.687,53,1.837,54,1.837,55,2.522,56,2.687,57,2.546,58,2.546,59,2.546,60,2.324,61,2.826,62,2.826,63,2.687,64,3.085,65,2.109,66,1.03,67,1.634,68,2.109,69,2.109,70,2.109,71,2.109,72,2.109,73,2.109,74,2.109,75,2.109,76,2.109,77,2.109,78,2.522,79,2.522,80,2.522]],["title/injectables/AppService.html",[44,1.713,81,0.524]],["body/injectables/AppService.html",[3,0.377,4,0.377,5,0.331,7,0.377,8,1.512,12,0.031,14,1.325,16,1.638,17,1.638,18,0.624,19,1.288,20,1.004,21,1.512,22,0.553,23,0.582,28,0.377,29,0.64,30,1.396,32,0.022,33,0.022,44,2.5,49,1.655,66,1.467,81,0.765,82,1.352,83,3.004,84,2.244,85,3.944,86,5.592,87,1.467,88,3.004,89,3.592,90,2.151,91,3.944,92,3.412,93,3.592,94,2.285,95,3.592,96,1.152,97,0.832,98,1.904,99,3.004,100,3.004]],["title/injectables/AuditService.html",[45,1.713,81,0.524]],["body/injectables/AuditService.html",[3,0.502,4,0.502,5,0.44,12,0.03,22,0.502,23,0.774,28,0.502,29,0.851,32,0.027,33,0.027,45,2.987,81,0.913,82,1.798,101,3.995]],["title/injectables/EjsService.html",[46,1.435,81,0.524]],["body/injectables/EjsService.html",[3,0.405,4,0.405,5,0.355,7,0.405,12,0.031,14,1.243,18,0.51,20,1.051,22,0.405,23,0.625,28,0.405,29,0.687,30,1.141,32,0.023,33,0.023,46,2.194,81,0.801,82,1.452,102,2.809,103,1.583,104,5.448,105,2.639,106,2.392,107,2.392,108,3.53,109,3.856,110,3.856,111,3.225,112,3.225,113,3.856,114,3.856,115,3.856,116,3.856,117,3.225,118,3.856,119,1.575,120,3.225,121,2.809,122,1.243,123,2.809,124,3.856]],["title/controllers/I18nController.html",[0,0.813,61,2.094]],["body/controllers/I18nController.html",[0,0.432,2,0.597,3,0.18,4,0.18,5,0.158,7,0.18,8,0.881,11,1.331,12,0.032,14,0.692,16,0.955,17,0.955,18,0.454,19,0.751,20,0.366,21,0.881,22,0.541,23,0.279,28,0.18,29,0.306,30,1.162,32,0.013,33,0.013,46,1.526,47,1.526,48,1.526,49,0.813,50,1.404,51,1.404,61,1.781,66,0.702,67,1.113,84,1.724,87,0.702,90,1.123,92,2.226,94,1.604,96,1.602,97,0.398,105,1.331,106,1.331,117,1.437,119,1.754,125,1.437,126,1.003,127,1.718,128,2.873,129,1.437,130,2.226,131,1.718,132,2.299,133,1.113,134,1.724,135,2.749,136,1.718,137,1.718,138,1.101,139,1.113,140,1.113,141,1.221,142,1.437,143,0.702,144,1.113,145,1.437,146,1.437,147,1.437,148,1.718,149,2.428,150,2.428,151,2.749,152,1.718,153,1.718,154,1.718,155,1.718,156,1.718,157,1.718,158,2.749,159,2.782,160,2.749,161,1.437,162,1.718,163,4.293,164,2.503,165,1.003,166,1.718,167,1.252,168,1.718,169,2.873,170,1.437,171,1.113,172,2.731,173,2.749,174,1.252,175,1.901,176,2.002,177,1.035,178,2.299,179,2.86,180,1.781,181,2.291,182,2.299,183,1.718,184,1.718,185,1.718,186,1.718,187,1.003,188,1.718,189,1.718,190,4.595,191,2.226,192,2.299,193,2.299,194,2.299,195,2.299,196,4.579,197,2.299,198,2.299,199,3.83,200,2.299,201,1.718,202,2.873,203,1.718,204,3.283,205,2.299,206,1.718,207,1.781,208,2.299,209,2.299,210,1.113,211,2.749,212,1.718,213,1.718,214,1.437,215,1.718,216,1.718,217,3.435,218,1.718,219,1.718,220,0.911,221,0.763,222,1.437]],["title/injectables/JinjaService.html",[47,1.435,81,0.524]],["body/injectables/JinjaService.html",[3,0.383,4,0.383,5,0.337,7,0.383,12,0.032,14,1.416,18,0.483,20,1.015,22,0.383,23,0.592,28,0.383,29,0.65,30,1.411,32,0.023,33,0.023,47,2.118,81,0.773,82,1.375,87,2.169,103,1.529,105,2.571,106,2.309,107,2.309,121,3.473,122,1.336,123,2.66,159,2.366,161,3.054,223,3.054,224,4.439,225,5.308,226,4.767,227,3.651,228,3.651,229,3.651,230,3.651,231,3.651,232,3.651,233,4.767]],["title/injectables/JsTLService.html",[48,1.435,81,0.524]],["body/injectables/JsTLService.html",[3,0.345,4,0.345,5,0.302,7,0.345,12,0.032,14,1.267,20,0.945,22,0.345,23,0.532,28,0.345,29,0.584,30,1.596,32,0.021,33,0.021,48,1.972,81,0.72,82,1.235,96,1.424,103,1.424,105,2.437,106,2.437,107,2.437,119,1.814,121,2.39,122,1.118,123,4.327,210,2.126,234,2.744,235,5.033,236,5.033,237,3.281,238,3.281,239,3.281,240,3.667,241,2.744,242,3.281,243,3.281,244,2.744,245,2.15,246,3.281,247,3.281,248,3.281,249,3.281,250,4.44,251,3.281,252,3.281,253,4.44,254,3.281,255,2.39,256,3.281,257,3.281]],["title/controllers/LambdaController.html",[0,0.813,57,1.886]],["body/controllers/LambdaController.html",[0,0.59,2,0.814,3,0.246,4,0.246,5,0.216,7,0.246,8,1.121,11,2.243,12,0.032,14,1.166,16,1.609,17,1.609,18,0.687,19,1.265,20,0.986,21,1.485,22,0.565,23,0.38,24,1.708,25,1.519,28,0.246,29,0.418,30,1.466,31,1.243,32,0.017,33,0.017,49,1.034,57,2.04,60,2.024,66,0.958,84,2.227,87,0.958,90,1.428,94,2.26,96,0.752,97,0.543,105,1.693,119,1.428,122,1.308,126,1.368,130,2.708,133,1.519,134,1.956,138,1.121,139,1.519,140,1.519,141,1.041,143,0.958,144,1.519,149,1.853,150,1.243,171,1.519,175,1.135,177,2.027,191,1.519,210,1.519,220,1.243,258,1.961,259,3.367,260,3.495,261,2.265,262,2.546,263,1.961,264,1.693,265,2.344,266,1.708,267,2.546,268,2.344,269,1.708,270,2.546,271,2.344,272,2.546,273,2.344,274,1.519,275,1.243,276,1.041,277,2.344,278,2.344,279,2.923,280,1.961,281,1.961,282,1.961,283,1.961,284,4.179,285,2.344,286,3.495,287,2.344,288,2.344,289,2.344,290,2.344,291,2.344,292,2.344,293,1.961,294,1.708,295,2.344,296,2.265,297,1.708]],["title/controllers/LambdaService.html",[0,0.813,60,1.565]],["body/controllers/LambdaService.html",[0,0.775,2,0.689,3,0.208,4,0.208,5,0.183,7,0.208,8,0.987,11,0.961,12,0.032,14,0.95,16,1.311,17,1.311,18,0.609,19,1.03,20,0.979,21,1.21,22,0.566,23,0.322,24,1.446,25,1.286,28,0.208,29,0.354,30,1.362,31,1.633,32,0.015,33,0.015,43,1.827,49,0.911,60,1.491,66,0.811,81,0.499,84,1.833,90,1.541,94,1.737,97,0.46,98,1.052,119,2.293,122,1.226,138,0.987,149,1.052,167,2.749,174,3.353,175,1.491,177,1.159,187,1.797,241,2.575,244,2.575,259,3.494,264,1.491,274,2.755,275,2,276,0.882,279,1.66,282,3.155,283,1.66,296,1.286,298,1.66,299,3.079,300,3.849,301,3.079,302,3.079,303,1.985,304,1.985,305,1.985,306,3.079,307,3.079,308,1.985,309,2.575,310,2.575,311,1.446,312,1.985,313,1.985,314,1.985,315,1.985,316,1.985,317,1.66,318,1.985,319,1.985,320,1.985,321,1.985,322,1.985,323,1.985,324,1.985,325,1.985,326,1.985,327,1.985,328,1.985,329,2.059,330,1.985,331,2.749,332,1.985,333,3.773,334,3.079,335,1.985,336,1.985,337,2.749,338,1.66,339,2.749,340,3.353,341,1.446,342,1.985,343,1.985,344,1.66,345,2.749,346,3.353,347,1.66,348,3.079,349,3.079,350,1.985,351,1.985,352,1.985,353,1.985,354,1.985,355,3.079,356,1.985,357,1.985,358,1.985,359,1.985,360,1.985,361,3.079,362,1.985,363,1.66,364,1.66,365,1.985,366,1.985]],["title/injectables/PrismaService.html",[49,0.956,81,0.524]],["body/injectables/PrismaService.html",[3,0.363,4,0.363,5,0.319,7,0.363,8,1.474,12,0.031,14,1.301,16,1.201,17,1.201,18,0.457,19,0.944,21,1.474,22,0.483,23,0.56,28,0.363,29,0.616,32,0.022,33,0.022,49,1.361,81,0.745,82,1.301,84,2.266,97,0.801,103,1.474,106,1.674,107,1.674,149,2.739,150,2.739,165,2.684,175,2.227,367,2.891,368,4.598,369,5.167,370,5.508,371,4.598,372,4.931,373,4.598,374,5.508,375,3.456,376,3.456,377,3.456,378,4.598,379,3.456,380,2.891,381,3.456,382,3.456,383,3.456,384,3.456,385,3.456,386,3.456,387,3.456]],["title/modules/RPCModule.html",[34,1.713,388,2.354]],["body/modules/RPCModule.html",[1,3.423,2,1.645,3,0.38,4,0.38,5,0.333,12,0.032,22,0.677,23,0.586,28,0.38,29,0.644,32,0.022,33,0.022,34,2.511,36,1.917,44,1.917,45,1.917,46,1.606,47,1.606,48,1.606,49,1.07,50,1.477,51,1.477,56,2.634,57,2.11,58,2.11,59,2.11,60,1.751,63,2.634,65,3.024,66,1.477,67,2.343,68,3.024,69,3.024,70,3.024,71,3.024,72,3.024,73,3.024,74,3.024,75,3.024,76,3.024,388,3.451,389,3.615,390,3.615]],["title/interfaces/RenderDto.html",[134,1.216,391,1.122]],["body/interfaces/RenderDto.html",[3,0.394,4,0.394,5,0.346,7,0.394,12,0.031,18,0.752,19,1.325,20,1.284,22,0.394,28,0.597,32,0.023,33,0.023,96,1.203,97,0.869,103,1.555,122,1.566,134,1.827,138,1.203,141,2.526,143,1.532,172,1.989,177,2.141,221,1.666,245,2.852,276,1.666,329,1.817,391,1.975,392,2.189,393,2.851,394,1.817,395,1.982]],["title/interfaces/RenderDtoTest.html",[391,1.122,394,1.565]],["body/interfaces/RenderDtoTest.html",[3,0.397,4,0.397,5,0.348,7,0.397,12,0.031,18,0.813,20,1.148,22,0.397,28,0.599,32,0.023,33,0.023,96,1.211,97,0.875,103,1.562,122,1.568,134,1.422,138,1.828,141,2.684,143,1.543,172,2.002,177,1.422,221,1.678,245,2.36,276,1.678,329,1.829,391,1.98,392,2.204,393,2.002,394,2.36,395,2.411]],["title/interfaces/RenderResponse.html",[143,1.32,391,1.122]],["body/interfaces/RenderResponse.html",[3,0.373,4,0.373,5,0.328,7,0.373,12,0.031,18,0.786,19,1.28,20,1.265,22,0.373,28,0.585,32,0.022,33,0.022,96,1.786,97,0.824,103,1.502,122,1.604,134,1.339,138,1.14,141,2.764,143,1.915,172,2.953,177,1.339,221,2.474,245,2.27,276,1.58,329,1.723,391,1.935,392,2.076,393,1.886,394,1.723,395,1.915]],["title/interfaces/RunFeedback.html",[275,1.713,391,1.122]],["body/interfaces/RunFeedback.html",[3,0.387,4,0.387,5,0.34,7,0.387,12,0.031,18,0.809,19,1.543,22,0.387,28,0.504,32,0.023,33,0.023,97,0.854,103,1.539,122,1.591,138,1.182,167,3.886,274,2.39,275,2.544,276,1.638,329,2.736,337,4.115,339,4.115,340,4.115,345,4.115,346,4.115,391,1.281,393,3.183,396,2.687]],["title/interfaces/SampleData.html",[391,1.122,395,1.32]],["body/interfaces/SampleData.html",[3,0.399,4,0.399,5,0.351,7,0.399,12,0.031,18,0.756,20,1.288,22,0.399,28,0.6,32,0.023,33,0.023,96,1.219,97,0.881,103,1.569,122,1.57,134,1.432,138,1.219,141,2.539,143,1.554,172,2.016,177,1.432,221,1.689,245,2.864,276,1.689,329,2.768,391,1.985,392,2.22,393,2.016,394,1.842,395,2.211]],["title/controllers/SearchController.html",[0,0.813,62,2.094]],["body/controllers/SearchController.html",[0,0.821,2,1.133,3,0.342,4,0.342,5,0.301,7,0.342,8,1.418,11,2.142,12,0.031,14,1.113,16,1.536,17,1.536,18,0.767,19,1.208,21,1.418,22,0.527,23,0.529,28,0.342,29,0.581,30,1.309,32,0.021,33,0.021,50,2.05,62,2.866,84,2.183,94,2.198,96,1.046,97,0.756,98,1.729,111,2.728,112,2.728,122,1.113,126,1.904,145,2.728,150,1.729,210,2.113,220,1.729,264,2.605,397,2.728,398,3.262,399,4.196,400,5.018,401,2.728,402,4.422,403,3.262,404,4.849,405,3.262,406,4.422,407,3.262,408,3.262,409,5.018,410,3.262,411,3.262,412,3.262,413,3.262]],["title/modules/SingletonServiceModule.html",[34,1.713,42,1.886]],["body/modules/SingletonServiceModule.html",[2,1.383,3,0.418,4,0.418,5,0.367,12,0.031,22,0.529,23,0.645,28,0.418,29,0.709,32,0.024,33,0.024,34,2.672,36,2.111,37,2.942,42,3.632,43,3.162,52,3.672,53,2.901,54,2.901,56,3.672,63,2.901,64,4.215,77,3.33,98,2.111,414,3.982,415,3.982,416,3.982,417,3.982]],["title/controllers/TemplateController.html",[0,0.813,59,1.886]],["body/controllers/TemplateController.html",[0,0.67,2,0.574,3,0.173,4,0.173,5,0.152,7,0.173,8,0.854,11,2.178,12,0.032,14,1.132,16,1.562,17,1.562,18,0.595,19,1.228,20,0.957,21,1.442,22,0.534,23,0.268,28,0.173,29,0.294,30,1.245,32,0.013,33,0.013,46,1.486,47,1.486,48,1.486,49,0.788,50,1.367,51,1.367,59,1.554,66,0.675,67,1.07,84,2.18,87,0.675,90,1.088,92,1.725,94,2.179,96,1.442,97,0.383,105,1.289,106,1.289,119,1.367,122,1.132,126,0.964,128,2.226,129,1.381,130,1.725,132,1.381,133,1.07,134,1.694,138,0.529,139,1.07,140,1.07,141,1.486,142,1.381,143,0.675,144,1.07,146,1.381,147,1.381,149,2.385,150,2.385,159,1.07,164,1.939,169,2.226,170,1.381,171,1.07,172,2.828,175,1.62,176,1.203,177,1.781,178,1.381,179,1.939,180,1.07,181,1.952,187,0.964,190,4.843,191,1.725,192,2.226,193,2.226,194,2.226,195,2.226,197,2.226,198,1.381,199,3.762,200,2.226,202,3.209,204,3.209,205,2.226,207,1.725,208,2.226,209,2.226,220,1.411,221,0.733,222,1.381,261,1.725,262,1.939,266,1.203,267,1.939,269,1.203,270,1.939,272,1.939,294,1.203,296,1.725,297,1.203,347,2.226,363,2.226,364,2.226,394,2.291,418,1.381,419,2.662,420,2.662,421,1.651,422,1.651,423,1.651,424,1.651,425,1.651,426,2.662,427,1.651,428,1.651,429,2.662,430,1.651,431,1.651,432,1.651,433,1.651,434,1.651,435,1.651,436,2.662,437,3.345,438,1.651,439,1.651,440,1.651,441,1.651,442,1.651,443,1.651,444,1.651]],["title/injectables/TemplateService.html",[50,1.32,81,0.524]],["body/injectables/TemplateService.html",[3,0.213,4,0.213,5,0.187,7,0.213,8,1.006,12,0.032,14,1.332,16,1.838,17,1.838,18,0.758,19,1.445,20,0.99,21,1.643,22,0.402,23,0.329,28,0.213,29,0.362,30,1.517,32,0.015,33,0.015,49,1.274,50,1.281,66,0.83,81,0.508,82,0.765,84,2.322,85,2.623,87,0.83,88,1.7,90,1.565,91,2.623,92,2.482,94,2.398,96,1.381,97,0.471,98,1.078,99,3.203,100,1.7,119,1.281,122,1.238,138,1.006,159,2.482,176,1.481,179,2.285,180,1.317,182,3.203,207,2.032,261,2.482,264,2.085,393,1.663,399,2.623,401,2.623,404,3.891,445,1.7,446,3.136,447,3.136,448,2.032,449,2.032,450,2.032,451,5.293,452,2.032,453,3.136,454,2.032,455,2.032,456,2.032,457,2.032,458,3.83,459,3.136,460,2.032,461,4.306,462,3.136,463,2.032,464,3.83,465,4.653,466,3.83,467,2.032,468,3.83,469,2.032,470,2.032,471,2.032,472,2.032,473,3.136,474,2.032,475,3.136,476,3.136,477,3.136]],["title/controllers/TransformerController.html",[0,0.813,58,1.886]],["body/controllers/TransformerController.html",[0,0.448,2,0.618,3,0.187,4,0.187,5,0.164,7,0.187,8,0.906,11,2.116,12,0.032,14,1.1,16,1.517,17,1.517,18,0.721,19,1.193,20,0.93,21,1.401,22,0.488,23,0.288,28,0.187,29,0.317,30,1.58,31,1.498,32,0.013,33,0.013,49,0.836,51,1.436,58,1.65,66,0.727,84,2.171,87,0.727,90,1.155,94,2.182,97,0.412,105,1.369,119,0.727,122,1.17,126,1.039,130,2.278,133,1.153,134,1.751,138,1.127,139,1.153,140,1.153,144,1.153,149,1.498,150,0.943,171,1.153,174,2.917,175,0.862,177,1.835,181,3.117,187,2.714,191,1.831,220,2.465,259,1.153,260,2.94,261,1.831,262,2.059,263,1.488,264,1.369,266,1.296,267,2.059,269,1.296,270,2.059,272,2.059,275,0.943,280,1.488,293,2.364,294,1.296,296,1.831,297,1.296,329,2.116,331,3.796,337,3.182,339,3.182,340,3.182,345,3.182,346,3.182,395,1.155,478,1.488,479,4.004,480,1.779,481,1.779,482,1.779,483,1.779,484,1.779,485,2.826,486,1.779,487,1.488,488,1.779,489,1.779,490,1.779,491,2.826,492,2.364,493,2.364,494,2.826,495,2.826,496,2.364,497,2.826,498,4.65,499,2.826,500,2.364,501,1.779,502,1.779,503,2.826,504,2.826,505,2.826,506,2.826,507,1.779,508,1.779,509,1.779,510,1.779,511,1.779]],["title/injectables/TransformerService.html",[51,1.32,81,0.524]],["body/injectables/TransformerService.html",[3,0.23,4,0.23,5,0.202,7,0.23,8,1.066,12,0.032,14,1.128,16,1.557,17,1.557,18,0.761,19,1.224,20,1.241,21,1.288,22,0.471,23,0.356,28,0.23,29,0.391,30,1.5,31,1.163,32,0.016,33,0.016,51,1.359,60,2.454,81,0.539,82,0.826,84,1.908,87,0.897,94,1.831,97,0.771,98,1.163,107,1.945,119,2.216,122,1.468,164,1.599,165,1.281,175,1.611,177,0.826,181,2.958,214,1.835,221,0.975,245,2.824,255,1.599,259,2.904,264,2.17,281,1.835,300,3.359,331,1.599,395,1.359,487,3.359,492,3.359,493,1.835,496,1.835,512,1.835,513,4.016,514,4.016,515,2.195,516,2.195,517,2.195,518,2.195,519,2.195,520,2.195,521,4.481,522,2.195,523,2.195,524,2.195,525,2.195,526,2.195,527,2.195,528,2.195,529,2.195,530,2.195,531,3.359,532,2.195,533,4.016,534,2.195,535,4.816,536,3.326,537,3.326,538,2.195,539,3.326,540,2.195,541,2.195,542,4.016,543,2.195,544,2.195,545,1.835,546,2.195,547,2.195,548,2.195,549,2.195,550,2.195]],["title/injectables/VMService.html",[43,1.565,81,0.524]],["body/injectables/VMService.html",[3,0.398,4,0.398,5,0.349,7,0.398,8,1.566,12,0.031,14,1.36,18,0.501,21,1.215,22,0.513,23,0.614,28,0.398,29,0.675,32,0.023,33,0.023,43,2.365,81,0.792,82,1.427,87,2.332,103,1.566,165,2.212,309,4.773,310,4.773,311,2.761,317,3.169,372,5.058,380,3.169,551,3.169,552,4.884,553,3.79,554,3.79,555,4.884,556,4.884,557,3.79,558,3.79,559,3.79,560,3.79,561,3.79]],["title/coverage.html",[562,3.675]],["body/coverage.html",[0,1.465,1,1.973,5,0.281,6,2.547,12,0.031,18,0.403,32,0.02,33,0.02,43,1.475,44,1.614,45,1.614,46,1.353,47,1.353,48,1.353,49,0.901,50,1.244,51,1.244,57,1.777,58,1.777,59,1.777,60,1.475,61,1.973,62,1.973,81,0.977,83,2.547,101,2.547,102,3.074,108,1.973,125,2.547,134,1.146,143,1.244,165,1.777,187,3.8,223,2.547,234,2.547,258,2.547,275,1.614,298,2.547,341,2.218,367,2.547,391,1.906,392,3.051,394,1.475,395,1.244,396,2.218,397,2.547,418,2.547,445,2.547,478,2.547,512,2.547,551,2.547,562,2.547,563,3.045,564,3.045,565,3.045,566,3.045,567,5.935,568,4.841,569,4.219,570,4.841,571,4.219,572,4.841,573,3.045,574,3.045,575,2.547,576,2.547,577,3.045,578,3.045]],["title/dependencies.html",[37,2.266,579,2.263]],["body/dependencies.html",[12,0.032,23,0.582,25,2.327,32,0.022,33,0.022,37,2.096,90,1.467,97,0.832,108,2.327,224,3.004,311,2.617,580,3.592,581,3.592,582,3.592,583,3.592,584,3.592,585,3.592,586,5.592,587,3.592,588,3.592,589,3.592,590,3.592,591,3.592,592,3.592,593,3.592,594,4.716,595,4.716,596,5.266,597,3.592,598,3.592,599,3.592,600,4.716,601,3.592,602,3.592,603,3.592,604,3.592,605,3.592,606,3.944,607,3.592,608,3.004,609,3.592,610,3.592,611,3.592,612,4.716,613,3.592,614,3.592,615,3.592,616,3.592,617,3.592,618,3.592,619,3.592,620,3.592,621,3.592,622,3.592,623,3.592,624,3.592,625,3.592,626,3.592,627,3.592]],["title/miscellaneous/functions.html",[628,1.434,629,3.246]],["body/miscellaneous/functions.html",[7,0.52,12,0.027,32,0.027,33,0.027,575,4.139,576,5.085,628,2.624,629,4.139,630,4.949]],["title/index.html",[7,0.284,631,2.706,632,2.706]],["body/index.html",[12,0.031,18,0.397,20,0.889,31,1.592,32,0.02,33,0.02,90,1.707,96,1.34,107,2.024,138,0.963,141,1.334,180,1.946,181,2.805,207,2.708,220,1.592,221,1.856,245,2.327,255,3.044,341,2.188,344,2.512,395,1.227,500,2.512,531,4.019,545,2.512,606,2.512,608,2.512,633,2.512,634,3.003,635,3.003,636,3.003,637,3.003,638,3.003,639,3.003,640,3.003,641,3.003,642,3.003,643,3.003,644,3.003,645,3.003,646,3.003,647,3.003,648,4.179,649,4.179,650,3.003,651,3.003,652,3.003,653,3.003,654,4.179,655,3.003,656,3.003,657,3.003,658,3.003,659,3.003,660,4.806,661,4.806,662,3.003,663,3.003,664,3.003,665,3.003,666,3.003,667,3.003,668,3.003,669,3.003,670,4.806,671,3.003,672,4.179,673,3.003,674,3.003,675,3.003,676,3.003,677,3.003,678,3.003,679,3.003,680,3.003,681,3.003,682,3.003,683,4.179,684,4.179,685,3.003,686,3.003,687,3.003,688,3.003,689,3.003,690,4.179,691,3.003,692,3.003,693,3.003,694,3.003,695,3.003,696,3.003,697,4.806,698,3.003,699,3.003,700,3.003,701,3.003,702,3.003,703,3.003,704,3.003,705,3.003,706,3.003,707,3.003,708,3.003]],["title/modules.html",[36,2.33]],["body/modules.html",[12,0.027,32,0.027,33,0.027,35,3.109,36,2.544,42,2.8,388,3.495,709,5.649,710,5.649,711,5.649,712,6.003,713,4.798,714,4.798]],["title/overview.html",[715,3.675]],["body/overview.html",[2,1.235,12,0.031,32,0.022,33,0.022,35,4.276,36,1.886,37,2.735,38,2.975,39,2.975,40,2.975,41,2.975,42,3.47,43,3.042,44,2.778,45,2.778,46,2.328,47,2.328,48,2.328,49,1.551,50,2.141,51,2.141,52,3.414,53,2.591,54,2.591,82,1.339,276,1.58,338,2.975,715,2.975,716,3.557,717,3.557,718,3.557]],["title/properties.html",[103,1.245,579,2.263]],["body/properties.html",[12,0.031,32,0.027,33,0.027,103,1.566,633,4.084,719,4.883,720,4.883,721,4.883,722,4.883,723,4.883]],["title/miscellaneous/typealiases.html",[628,1.434,724,3.882]],["body/miscellaneous/typealiases.html",[7,0.515,12,0.027,18,0.757,32,0.027,33,0.027,264,2.375,274,3.708,396,3.573,628,2.6,725,4.905,726,4.905]],["title/miscellaneous/variables.html",[240,2.828,628,1.434]],["body/miscellaneous/variables.html",[7,0.513,12,0.029,32,0.027,33,0.027,102,3.557,106,2.365,107,2.365,108,3.698,120,4.084,240,3.557,628,2.589,727,4.883]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":187,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":720,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0.6.9",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["1).trim",{"_index":247,"title":{},"body":{"injectables/JsTLService.html":{}}}],["1.0.0",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["1.6.7",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":500,"title":{},"body":{"controllers/TransformerController.html":{},"index.html":{}}}],["2.0.0",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":473,"title":{},"body":{"injectables/TemplateService.html":{}}}],["3",{"_index":338,"title":{},"body":{"controllers/LambdaService.html":{},"overview.html":{}}}],["3.0.2",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["3.1.6",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["3.9.7",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["4.15.0",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":718,"title":{},"body":{"overview.html":{}}}],["5.1.5",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["6.0.3",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":716,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["8.2.6",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["8.4.4",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":717,"title":{},"body":{"overview.html":{}}}],["abbreviations",{"_index":653,"title":{},"body":{"index.html":{}}}],["accomoactual",{"_index":530,"title":{},"body":{"injectables/TransformerService.html":{}}}],["add",{"_index":292,"title":{},"body":{"controllers/LambdaController.html":{}}}],["addlambda",{"_index":260,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["addlambda(data",{"_index":263,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["addtemplate",{"_index":128,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["addtemplate(templatedata",{"_index":129,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["aliases",{"_index":725,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":704,"title":{},"body":{"index.html":{}}}],["allowed",{"_index":169,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["api",{"_index":669,"title":{},"body":{"index.html":{}}}],["apis",{"_index":635,"title":{},"body":{"index.html":{}}}],["app",{"_index":376,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.close",{"_index":387,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":390,"title":{},"body":{"modules/RPCModule.html":{}}}],["app.service",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/RPCModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":35,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":44,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/RPCModule.html":{},"coverage.html":{},"overview.html":{}}}],["arr[colname",{"_index":157,"title":{},"body":{"controllers/I18nController.html":{}}}],["arrayobj",{"_index":152,"title":{},"body":{"controllers/I18nController.html":{}}}],["arrayobj.some((arr",{"_index":156,"title":{},"body":{"controllers/I18nController.html":{}}}],["async",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["auditservice",{"_index":45,"title":{"injectables/AuditService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuditService.html":{},"modules/RPCModule.html":{},"coverage.html":{},"overview.html":{}}}],["author",{"_index":723,"title":{},"body":{"properties.html":{}}}],["autoescape",{"_index":232,"title":{},"body":{"injectables/JinjaService.html":{}}}],["available",{"_index":714,"title":{},"body":{"modules.html":{}}}],["await",{"_index":175,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["badrequestexception",{"_index":137,"title":{},"body":{"controllers/I18nController.html":{}}}],["badrequestexception('duplicate",{"_index":166,"title":{},"body":{"controllers/I18nController.html":{}}}],["bigint",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":138,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"index.html":{}}}],["bodyarr",{"_index":184,"title":{},"body":{"controllers/I18nController.html":{}}}],["bodyarr.foreach(async",{"_index":188,"title":{},"body":{"controllers/I18nController.html":{}}}],["bodyarr.length",{"_index":186,"title":{},"body":{"controllers/I18nController.html":{}}}],["bodyi18n",{"_index":182,"title":{},"body":{"controllers/I18nController.html":{},"injectables/TemplateService.html":{}}}],["boolean",{"_index":161,"title":{},"body":{"controllers/I18nController.html":{},"injectables/JinjaService.html":{}}}],["bootstrap",{"_index":576,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["break",{"_index":204,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["browse",{"_index":712,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":709,"title":{},"body":{"modules.html":{}}}],["can't",{"_index":291,"title":{},"body":{"controllers/LambdaController.html":{}}}],["case",{"_index":199,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["catch",{"_index":363,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TemplateController.html":{}}}],["class",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["cloneddata",{"_index":535,"title":{},"body":{"injectables/TransformerService.html":{}}}],["cloneddata[field",{"_index":542,"title":{},"body":{"injectables/TransformerService.html":{}}}],["cloudbuild.googleapis.com",{"_index":666,"title":{},"body":{"index.html":{}}}],["cloudfunctions.googleapis.com",{"_index":665,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_singletonservicemodule",{"_index":414,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["cluster_singletonservicemodule_exports",{"_index":415,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["cluster_singletonservicemodule_providers",{"_index":416,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["codes",{"_index":168,"title":{},"body":{"controllers/I18nController.html":{}}}],["colname",{"_index":153,"title":{},"body":{"controllers/I18nController.html":{}}}],["coming",{"_index":651,"title":{},"body":{"index.html":{}}}],["commenting",{"_index":671,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":693,"title":{},"body":{"index.html":{}}}],["compose",{"_index":686,"title":{},"body":{"index.html":{}}}],["config",{"_index":641,"title":{},"body":{"index.html":{}}}],["connected",{"_index":383,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console",{"_index":557,"title":{},"body":{"injectables/VMService.html":{}}}],["console.error",{"_index":290,"title":{},"body":{"controllers/LambdaController.html":{}}}],["console.error(e",{"_index":365,"title":{},"body":{"controllers/LambdaService.html":{}}}],["console.log",{"_index":210,"title":{},"body":{"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/SearchController.html":{}}}],["console.log('vm",{"_index":555,"title":{},"body":{"injectables/VMService.html":{}}}],["console.log(data",{"_index":330,"title":{},"body":{"controllers/LambdaService.html":{}}}],["consoleoutput",{"_index":346,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["consoleoutput.push(json.stringify(log",{"_index":352,"title":{},"body":{"controllers/LambdaService.html":{}}}],["const",{"_index":119,"title":{},"body":{"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["constructor",{"_index":87,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["constructor(lambdaservice",{"_index":515,"title":{},"body":{"injectables/TransformerService.html":{}}}],["constructor(prisma",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["constructor(private",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"controllers/LambdaService.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{}}}],["contains",{"_index":475,"title":{},"body":{"injectables/TemplateService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}},"body":{"controllers/AppController.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["controller('i18n",{"_index":148,"title":{},"body":{"controllers/I18nController.html":{}}}],["controller('lambda",{"_index":278,"title":{},"body":{"controllers/LambdaController.html":{}}}],["controller('search",{"_index":410,"title":{},"body":{"controllers/SearchController.html":{}}}],["controller('transformer",{"_index":490,"title":{},"body":{"controllers/TransformerController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"modules/RPCModule.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"overview.html":{}}}],["core/audit/audit.service",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/i18n/i18n/i18n.controller",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["core/lambda/lambda.controller",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/lambda/lambda.service",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/lambda/vm.service",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{}}}],["core/search/search.controller",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["core/template/template.controller",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/template/template.service",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/transformer/transformer.controller",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["core/transformer/transformer.service",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["cors",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":562,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createtemplate",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["createtemplate(data",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["crud",{"_index":636,"title":{},"body":{"index.html":{}}}],["cursor",{"_index":466,"title":{},"body":{"injectables/TemplateService.html":{}}}],["d",{"_index":688,"title":{},"body":{"index.html":{}}}],["data",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["data.field1",{"_index":675,"title":{},"body":{"index.html":{}}}],["data.field2",{"_index":677,"title":{},"body":{"index.html":{}}}],["data.lambda",{"_index":286,"title":{},"body":{"controllers/LambdaController.html":{}}}],["data.sample.data",{"_index":505,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.sample.path",{"_index":506,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.sampledata",{"_index":437,"title":{},"body":{"controllers/TemplateController.html":{}}}],["data.testdata",{"_index":287,"title":{},"body":{"controllers/LambdaController.html":{}}}],["data.transformer",{"_index":504,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.transformer.type",{"_index":503,"title":{},"body":{"controllers/TransformerController.html":{}}}],["data.type",{"_index":438,"title":{},"body":{"controllers/TemplateController.html":{}}}],["data.username",{"_index":663,"title":{},"body":{"index.html":{}}}],["database",{"_index":682,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["default",{"_index":106,"title":{},"body":{"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["delete",{"_index":139,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["delete('/:id",{"_index":267,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate",{"_index":261,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate(@param('id",{"_index":294,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate(id",{"_index":266,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["deletetemplate(where",{"_index":450,"title":{},"body":{"injectables/TemplateService.html":{}}}],["dependencies",{"_index":37,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deployment",{"_index":707,"title":{},"body":{"index.html":{}}}],["description",{"_index":633,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dev",{"_index":661,"title":{},"body":{"index.html":{}}}],["did.split",{"_index":325,"title":{},"body":{"controllers/LambdaService.html":{}}}],["did:internal:1",{"_index":321,"title":{},"body":{"controllers/LambdaService.html":{}}}],["didparts",{"_index":324,"title":{},"body":{"controllers/LambdaService.html":{}}}],["didparts[didparts.length",{"_index":326,"title":{},"body":{"controllers/LambdaService.html":{}}}],["disable",{"_index":112,"title":{},"body":{"injectables/EjsService.html":{},"controllers/SearchController.html":{}}}],["docker",{"_index":685,"title":{},"body":{"index.html":{}}}],["docs",{"_index":670,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":703,"title":{},"body":{"index.html":{}}}],["done",{"_index":691,"title":{},"body":{"index.html":{}}}],["dto/render",{"_index":144,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["e",{"_index":364,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TemplateController.html":{}}}],["e.message",{"_index":366,"title":{},"body":{"controllers/LambdaService.html":{}}}],["ejs",{"_index":108,"title":{},"body":{"injectables/EjsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["ejsservice",{"_index":46,"title":{"injectables/EjsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{},"overview.html":{}}}],["element",{"_index":189,"title":{},"body":{"controllers/I18nController.html":{}}}],["element.lang",{"_index":211,"title":{},"body":{"controllers/I18nController.html":{}}}],["enableshutdownhooks",{"_index":371,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":373,"title":{},"body":{"injectables/PrismaService.html":{}}}],["endtime",{"_index":361,"title":{},"body":{"controllers/LambdaService.html":{}}}],["engine",{"_index":104,"title":{},"body":{"injectables/EjsService.html":{}}}],["engines/ejs/ejs.service",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["engines/jinja/jinja.service",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{}}}],["enum",{"_index":664,"title":{},"body":{"index.html":{}}}],["err",{"_index":213,"title":{},"body":{"controllers/I18nController.html":{}}}],["error",{"_index":340,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["error('lambda",{"_index":550,"title":{},"body":{"injectables/TransformerService.html":{}}}],["eslint",{"_index":111,"title":{},"body":{"injectables/EjsService.html":{},"controllers/SearchController.html":{}}}],["eslint/no",{"_index":116,"title":{},"body":{"injectables/EjsService.html":{}}}],["example",{"_index":320,"title":{},"body":{"controllers/LambdaService.html":{}}}],["executiontimeinms",{"_index":345,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["existing",{"_index":386,"title":{},"body":{"injectables/PrismaService.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["exports",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{}}}],["express",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":368,"title":{},"body":{"injectables/PrismaService.html":{}}}],["external",{"_index":560,"title":{},"body":{"injectables/VMService.html":{}}}],["f1",{"_index":673,"title":{},"body":{"index.html":{}}}],["f2",{"_index":674,"title":{},"body":{"index.html":{}}}],["failed",{"_index":293,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["fallback",{"_index":123,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{}}}],["false",{"_index":561,"title":{},"body":{"injectables/VMService.html":{}}}],["fastify",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["feel",{"_index":638,"title":{},"body":{"index.html":{}}}],["field",{"_index":533,"title":{},"body":{"injectables/TransformerService.html":{}}}],["field1",{"_index":672,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{}}}],["find",{"_index":319,"title":{},"body":{"controllers/LambdaService.html":{}}}],["fix",{"_index":529,"title":{},"body":{"injectables/TransformerService.html":{}}}],["found",{"_index":214,"title":{},"body":{"controllers/I18nController.html":{},"injectables/TransformerService.html":{}}}],["free",{"_index":639,"title":{},"body":{"index.html":{}}}],["function",{"_index":341,"title":{},"body":{"controllers/LambdaService.html":{},"coverage.html":{},"index.html":{}}}],["function(data",{"_index":333,"title":{},"body":{"controllers/LambdaService.html":{}}}],["function\\s*\\(([^)]*)\\)\\s",{"_index":335,"title":{},"body":{"controllers/LambdaService.html":{}}}],["functiondid",{"_index":544,"title":{},"body":{"injectables/TransformerService.html":{}}}],["functioninsandbox",{"_index":358,"title":{},"body":{"controllers/LambdaService.html":{}}}],["functioninsandbox(data",{"_index":360,"title":{},"body":{"controllers/LambdaService.html":{}}}],["functions",{"_index":629,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":242,"title":{},"body":{"injectables/JsTLService.html":{}}}],["generating",{"_index":690,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":270,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["get('body",{"_index":406,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('tag",{"_index":402,"title":{},"body":{"controllers/SearchController.html":{}}}],["getalltemplates",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["getlambdafromdid",{"_index":299,"title":{},"body":{"controllers/LambdaService.html":{}}}],["getlambdafromdid(did",{"_index":302,"title":{},"body":{"controllers/LambdaService.html":{}}}],["getobjpath",{"_index":235,"title":{},"body":{"injectables/JsTLService.html":{}}}],["getstudent",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getstudent(data",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["gettemplate",{"_index":262,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["gettemplate(@param('id",{"_index":297,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["gettemplate(id",{"_index":269,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["getting",{"_index":631,"title":{"index.html":{}},"body":{}}],["google",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["gql",{"_index":683,"title":{},"body":{"index.html":{}}}],["graph",{"_index":713,"title":{},"body":{"modules.html":{}}}],["grpc",{"_index":697,"title":{},"body":{"index.html":{}}}],["grpc/grpc",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["grpcmethod",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["grpcmethod('lambdaservice",{"_index":307,"title":{},"body":{"controllers/LambdaService.html":{}}}],["grpcmethod('studentcontroller",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["hasduplicate",{"_index":151,"title":{},"body":{"controllers/I18nController.html":{}}}],["hash",{"_index":154,"title":{},"body":{"controllers/I18nController.html":{}}}],["hash[arr[colname",{"_index":158,"title":{},"body":{"controllers/I18nController.html":{}}}],["hello",{"_index":679,"title":{},"body":{"index.html":{}}}],["i18n",{"_index":127,"title":{},"body":{"controllers/I18nController.html":{}}}],["i18ncontroller",{"_index":61,"title":{"controllers/I18nController.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"coverage.html":{}}}],["id",{"_index":177,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["identifier",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":498,"title":{},"body":{"controllers/TransformerController.html":{}}}],["implements",{"_index":380,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/VMService.html":{}}}],["import",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["imports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}}}],["include",{"_index":179,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":374,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["initialized",{"_index":556,"title":{},"body":{"injectables/VMService.html":{}}}],["injectable",{"_index":81,"title":{"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{}}}],["injectables",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"injectables/TemplateService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"overview.html":{}}}],["insensitive",{"_index":477,"title":{},"body":{"injectables/TemplateService.html":{}}}],["installation",{"_index":643,"title":{},"body":{"index.html":{}}}],["installtemplating",{"_index":645,"title":{},"body":{"index.html":{}}}],["interface",{"_index":391,"title":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{}},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"coverage.html":{}}}],["interfaces",{"_index":276,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"overview.html":{}}}],["interpolate",{"_index":236,"title":{},"body":{"injectables/JsTLService.html":{}}}],["invalid",{"_index":343,"title":{},"body":{"controllers/LambdaService.html":{}}}],["isduplicate",{"_index":160,"title":{},"body":{"controllers/I18nController.html":{}}}],["javascript",{"_index":648,"title":{},"body":{"index.html":{}}}],["jinja",{"_index":650,"title":{},"body":{"index.html":{}}}],["jinjaservice",{"_index":47,"title":{"injectables/JinjaService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{},"overview.html":{}}}],["js",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":608,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["json.parse(data.sampledata",{"_index":436,"title":{},"body":{"controllers/TemplateController.html":{}}}],["json.parse(json.stringify(data",{"_index":536,"title":{},"body":{"injectables/TransformerService.html":{}}}],["json.parse(lambda.testdata",{"_index":328,"title":{},"body":{"controllers/LambdaService.html":{}}}],["json.stringify(data.sample.response",{"_index":508,"title":{},"body":{"controllers/TransformerController.html":{}}}],["json.stringify(result",{"_index":507,"title":{},"body":{"controllers/TransformerController.html":{}}}],["jstl",{"_index":654,"title":{},"body":{"index.html":{}}}],["jstlservice",{"_index":48,"title":{"injectables/JsTLService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{},"overview.html":{}}}],["jwt",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["key",{"_index":255,"title":{},"body":{"injectables/JsTLService.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["lambda",{"_index":259,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["lambda.body",{"_index":355,"title":{},"body":{"controllers/LambdaService.html":{}}}],["lambda.language",{"_index":353,"title":{},"body":{"controllers/LambdaService.html":{}}}],["lambda.service",{"_index":277,"title":{},"body":{"controllers/LambdaController.html":{}}}],["lambda/lambda.service",{"_index":524,"title":{},"body":{"injectables/TransformerService.html":{}}}],["lambdacontroller",{"_index":57,"title":{"controllers/LambdaController.html":{}},"body":{"modules/AppModule.html":{},"controllers/LambdaController.html":{},"modules/RPCModule.html":{},"coverage.html":{}}}],["lambdajustbody",{"_index":274,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"miscellaneous/typealiases.html":{}}}],["lambdarunfeedback",{"_index":499,"title":{},"body":{"controllers/TransformerController.html":{}}}],["lambdaservice",{"_index":60,"title":{"controllers/LambdaService.html":{}},"body":{"modules/AppModule.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"modules/RPCModule.html":{},"injectables/TransformerService.html":{},"coverage.html":{}}}],["lang",{"_index":163,"title":{},"body":{"controllers/I18nController.html":{}}}],["language",{"_index":167,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{}}}],["language.typescript",{"_index":354,"title":{},"body":{"controllers/LambdaService.html":{}}}],["languages",{"_index":646,"title":{},"body":{"index.html":{}}}],["last",{"_index":322,"title":{},"body":{"controllers/LambdaService.html":{}}}],["license",{"_index":721,"title":{},"body":{"properties.html":{}}}],["line",{"_index":114,"title":{},"body":{"injectables/EjsService.html":{}}}],["literal",{"_index":264,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/SearchController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"miscellaneous/typealiases.html":{}}}],["literals",{"_index":649,"title":{},"body":{"index.html":{}}}],["loader",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":351,"title":{},"body":{"controllers/LambdaService.html":{}}}],["logger",{"_index":370,"title":{},"body":{"injectables/PrismaService.html":{}}}],["logger(prismaservice.name",{"_index":378,"title":{},"body":{"injectables/PrismaService.html":{}}}],["manager",{"_index":642,"title":{},"body":{"index.html":{}}}],["match",{"_index":244,"title":{},"body":{"injectables/JsTLService.html":{},"controllers/LambdaService.html":{}}}],["match.slice(2",{"_index":246,"title":{},"body":{"injectables/JsTLService.html":{}}}],["matching",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meta",{"_index":221,"title":{},"body":{"controllers/I18nController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["metadata",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["migrate",{"_index":660,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":656,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":628,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":476,"title":{},"body":{"injectables/TemplateService.html":{}}}],["module",{"_index":34,"title":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}}}],["module.exports",{"_index":357,"title":{},"body":{"controllers/LambdaService.html":{}}}],["modules",{"_index":36,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["nested",{"_index":251,"title":{},"body":{"injectables/JsTLService.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":165,"title":{},"body":{"controllers/I18nController.html":{},"injectables/PrismaService.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{}}}],["next",{"_index":113,"title":{},"body":{"injectables/EjsService.html":{}}}],["nodevm",{"_index":309,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{}}}],["notes",{"_index":667,"title":{},"body":{"index.html":{}}}],["now",{"_index":701,"title":{},"body":{"index.html":{}}}],["npx",{"_index":692,"title":{},"body":{"index.html":{}}}],["null",{"_index":174,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaService.html":{},"controllers/TransformerController.html":{}}}],["number",{"_index":393,"title":{},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"injectables/TemplateService.html":{}}}],["number(id",{"_index":296,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["number(renderdto.id",{"_index":280,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TransformerController.html":{}}}],["nunjucks",{"_index":224,"title":{},"body":{"injectables/JinjaService.html":{},"dependencies.html":{}}}],["o.key",{"_index":541,"title":{},"body":{"injectables/TransformerService.html":{}}}],["oauth20",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["obj",{"_index":253,"title":{},"body":{"injectables/JsTLService.html":{}}}],["object",{"_index":252,"title":{},"body":{"injectables/JsTLService.html":{}}}],["object.create(null",{"_index":155,"title":{},"body":{"controllers/I18nController.html":{}}}],["ok",{"_index":362,"title":{},"body":{"controllers/LambdaService.html":{}}}],["onmoduleinit",{"_index":372,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/VMService.html":{}}}],["option",{"_index":539,"title":{},"body":{"injectables/TransformerService.html":{}}}],["option.value",{"_index":543,"title":{},"body":{"injectables/TransformerService.html":{}}}],["optional",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["options",{"_index":531,"title":{},"body":{"injectables/TransformerService.html":{},"index.html":{}}}],["options.find((o",{"_index":540,"title":{},"body":{"injectables/TransformerService.html":{}}}],["orderby",{"_index":468,"title":{},"body":{"injectables/TemplateService.html":{}}}],["original",{"_index":534,"title":{},"body":{"injectables/TransformerService.html":{}}}],["out",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"overview.html":{}}}],["overview",{"_index":715,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":694,"title":{},"body":{"index.html":{}}}],["package",{"_index":579,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":140,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["params",{"_index":461,"title":{},"body":{"injectables/TemplateService.html":{}}}],["part",{"_index":323,"title":{},"body":{"controllers/LambdaService.html":{}}}],["passport",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["path",{"_index":245,"title":{},"body":{"injectables/JsTLService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["path.split('.').pop",{"_index":537,"title":{},"body":{"injectables/TransformerService.html":{}}}],["path.split('.').reduce((res",{"_index":254,"title":{},"body":{"injectables/JsTLService.html":{}}}],["perf_hooks",{"_index":313,"title":{},"body":{"controllers/LambdaService.html":{}}}],["performance",{"_index":312,"title":{},"body":{"controllers/LambdaService.html":{}}}],["performance.now",{"_index":349,"title":{},"body":{"controllers/LambdaService.html":{}}}],["post",{"_index":130,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["post('/process",{"_index":272,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["post('/process/test",{"_index":426,"title":{},"body":{"controllers/TemplateController.html":{}}}],["post('/process/testmany",{"_index":429,"title":{},"body":{"controllers/TemplateController.html":{}}}],["post('/test",{"_index":485,"title":{},"body":{"controllers/TransformerController.html":{}}}],["post('process",{"_index":135,"title":{},"body":{"controllers/I18nController.html":{}}}],["postman",{"_index":698,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":126,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["prettier/prettier",{"_index":408,"title":{},"body":{"controllers/SearchController.html":{}}}],["prisma",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"dependencies.html":{},"index.html":{}}}],["prisma.lambdacreateinput",{"_index":282,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["prisma.service",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{}}}],["prisma.templatecreateinput",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["prisma.templateorderbywithrelationinput",{"_index":469,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.templateupdateinput",{"_index":470,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.templatewhereinput",{"_index":467,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.templatewhereuniqueinput",{"_index":451,"title":{},"body":{"injectables/TemplateService.html":{}}}],["prisma.transformercreateinput",{"_index":479,"title":{},"body":{"controllers/TransformerController.html":{}}}],["prisma/client",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":369,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":49,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":149,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["proc",{"_index":196,"title":{},"body":{"controllers/I18nController.html":{}}}],["process",{"_index":300,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/TransformerService.html":{}}}],["process(lambda",{"_index":304,"title":{},"body":{"controllers/LambdaService.html":{}}}],["process(transformer",{"_index":517,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processed",{"_index":172,"title":{},"body":{"controllers/I18nController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{}}}],["processed.push",{"_index":212,"title":{},"body":{"controllers/I18nController.html":{}}}],["processinternalfunction",{"_index":513,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processinternalfunction(transformerconfig",{"_index":519,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processoptions",{"_index":514,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processoptions(transformerconfig",{"_index":522,"title":{},"body":{"injectables/TransformerService.html":{}}}],["processrpc",{"_index":301,"title":{},"body":{"controllers/LambdaService.html":{}}}],["processrpc(lambda",{"_index":306,"title":{},"body":{"controllers/LambdaService.html":{}}}],["promise",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["properties",{"_index":103,"title":{"properties.html":{}},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"injectables/VMService.html":{},"properties.html":{}}}],["property",{"_index":250,"title":{},"body":{"injectables/JsTLService.html":{}}}],["providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"modules/SingletonServiceModule.html":{}}}],["public",{"_index":668,"title":{},"body":{"index.html":{}}}],["query",{"_index":409,"title":{},"body":{"controllers/SearchController.html":{}}}],["querystring",{"_index":404,"title":{},"body":{"controllers/SearchController.html":{},"injectables/TemplateService.html":{}}}],["querystring.querystring",{"_index":412,"title":{},"body":{"controllers/SearchController.html":{}}}],["readonly",{"_index":150,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"injectables/PrismaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["redirect",{"_index":558,"title":{},"body":{"injectables/VMService.html":{}}}],["reflect",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":241,"title":{},"body":{"injectables/JsTLService.html":{},"controllers/LambdaService.html":{}}}],["regex.exec(lambda.body",{"_index":336,"title":{},"body":{"controllers/LambdaService.html":{}}}],["render",{"_index":105,"title":{},"body":{"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["render(@body",{"_index":171,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["render(renderdto",{"_index":133,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["render(substitute",{"_index":637,"title":{},"body":{"index.html":{}}}],["renderdto",{"_index":134,"title":{"interfaces/RenderDto.html":{}},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["renderdto.data",{"_index":191,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{}}}],["renderdto.data.lang",{"_index":173,"title":{},"body":{"controllers/I18nController.html":{}}}],["renderdto.data.type",{"_index":215,"title":{},"body":{"controllers/I18nController.html":{}}}],["renderdto.id",{"_index":178,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["renderdto.path",{"_index":495,"title":{},"body":{"controllers/TransformerController.html":{}}}],["renderdtotest",{"_index":394,"title":{"interfaces/RenderDtoTest.html":{}},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"coverage.html":{}}}],["renderresponse",{"_index":143,"title":{"interfaces/RenderResponse.html":{}},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"coverage.html":{}}}],["rendertest",{"_index":419,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertest(@body",{"_index":435,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertest(data",{"_index":425,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertestmany",{"_index":420,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertestmany(@body",{"_index":442,"title":{},"body":{"controllers/TemplateController.html":{}}}],["rendertestmany(data",{"_index":428,"title":{},"body":{"controllers/TemplateController.html":{}}}],["replace",{"_index":532,"title":{},"body":{"injectables/TransformerService.html":{}}}],["requests",{"_index":700,"title":{},"body":{"index.html":{}}}],["require",{"_index":559,"title":{},"body":{"injectables/VMService.html":{}}}],["require('ejs",{"_index":120,"title":{},"body":{"injectables/EjsService.html":{},"miscellaneous/variables.html":{}}}],["require('nunjucks",{"_index":230,"title":{},"body":{"injectables/JinjaService.html":{}}}],["require('typescript",{"_index":315,"title":{},"body":{"controllers/LambdaService.html":{}}}],["requires",{"_index":118,"title":{},"body":{"injectables/EjsService.html":{}}}],["res[key",{"_index":256,"title":{},"body":{"injectables/JsTLService.html":{}}}],["reset",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"overview.html":{}}}],["response",{"_index":329,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/TransformerController.html":{}}}],["result",{"_index":331,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["result.response",{"_index":549,"title":{},"body":{"injectables/TransformerService.html":{}}}],["result.statuscode",{"_index":548,"title":{},"body":{"injectables/TransformerService.html":{}}}],["results",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["returns",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["rimraf",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["rpcmodule",{"_index":388,"title":{"modules/RPCModule.html":{}},"body":{"modules/RPCModule.html":{},"modules.html":{}}}],["run",{"_index":545,"title":{},"body":{"injectables/TransformerService.html":{},"index.html":{}}}],["runfeedback",{"_index":275,"title":{"interfaces/RunFeedback.html":{}},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["running",{"_index":655,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":696,"title":{},"body":{"index.html":{}}}],["sample",{"_index":502,"title":{},"body":{"controllers/TransformerController.html":{}}}],["sampledata",{"_index":395,"title":{"interfaces/SampleData.html":{}},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"coverage.html":{},"index.html":{}}}],["schema",{"_index":658,"title":{},"body":{"index.html":{}}}],["schema.prisma",{"_index":659,"title":{},"body":{"index.html":{}}}],["search",{"_index":398,"title":{},"body":{"controllers/SearchController.html":{}}}],["searchbody",{"_index":446,"title":{},"body":{"injectables/TemplateService.html":{}}}],["searchbody(querystring",{"_index":453,"title":{},"body":{"injectables/TemplateService.html":{}}}],["searchcontroller",{"_index":62,"title":{"controllers/SearchController.html":{}},"body":{"modules/AppModule.html":{},"controllers/SearchController.html":{},"coverage.html":{}}}],["searchtag",{"_index":399,"title":{},"body":{"controllers/SearchController.html":{},"injectables/TemplateService.html":{}}}],["searchtag(querystring",{"_index":401,"title":{},"body":{"controllers/SearchController.html":{},"injectables/TemplateService.html":{}}}],["searchtemplatebody",{"_index":400,"title":{},"body":{"controllers/SearchController.html":{}}}],["searchtemplatebody(querystring",{"_index":405,"title":{},"body":{"controllers/SearchController.html":{}}}],["select",{"_index":183,"title":{},"body":{"controllers/I18nController.html":{}}}],["send",{"_index":699,"title":{},"body":{"index.html":{}}}],["server",{"_index":684,"title":{},"body":{"index.html":{}}}],["service",{"_index":634,"title":{},"body":{"index.html":{}}}],["setup",{"_index":681,"title":{},"body":{"index.html":{}}}],["share",{"_index":705,"title":{},"body":{"index.html":{}}}],["signature",{"_index":334,"title":{},"body":{"controllers/LambdaService.html":{}}}],["singletonservice.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["singletonservicemodule",{"_index":42,"title":{"modules/SingletonServiceModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"modules.html":{},"overview.html":{}}}],["skip",{"_index":464,"title":{},"body":{"injectables/TemplateService.html":{}}}],["soon",{"_index":652,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"modules/RPCModule.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"modules/SingletonServiceModule.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{}}}],["spec",{"_index":662,"title":{},"body":{"index.html":{}}}],["specified",{"_index":249,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/.../ejs.service.ts",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../interfaces.ts",{"_index":726,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":630,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:8",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:10",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:14",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/audit/audit.service.ts",{"_index":101,"title":{},"body":{"injectables/AuditService.html":{},"coverage.html":{}}}],["src/core/dto/render.ts",{"_index":392,"title":{},"body":{"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"coverage.html":{}}}],["src/core/i18n/i18n/i18n.controller.ts",{"_index":125,"title":{},"body":{"controllers/I18nController.html":{},"coverage.html":{}}}],["src/core/i18n/i18n/i18n.controller.ts:31",{"_index":131,"title":{},"body":{"controllers/I18nController.html":{}}}],["src/core/i18n/i18n/i18n.controller.ts:54",{"_index":136,"title":{},"body":{"controllers/I18nController.html":{}}}],["src/core/lambda/interfaces",{"_index":488,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/lambda/interfaces.ts",{"_index":396,"title":{},"body":{"interfaces/RunFeedback.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/lambda/lambda.controller.ts",{"_index":258,"title":{},"body":{"controllers/LambdaController.html":{},"coverage.html":{}}}],["src/core/lambda/lambda.controller.ts:17",{"_index":273,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.controller.ts:26",{"_index":265,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.controller.ts:47",{"_index":268,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.controller.ts:52",{"_index":271,"title":{},"body":{"controllers/LambdaController.html":{}}}],["src/core/lambda/lambda.service.ts",{"_index":298,"title":{},"body":{"controllers/LambdaService.html":{},"coverage.html":{}}}],["src/core/lambda/lambda.service.ts:19",{"_index":303,"title":{},"body":{"controllers/LambdaService.html":{}}}],["src/core/lambda/lambda.service.ts:28",{"_index":308,"title":{},"body":{"controllers/LambdaService.html":{}}}],["src/core/lambda/lambda.service.ts:41",{"_index":305,"title":{},"body":{"controllers/LambdaService.html":{}}}],["src/core/lambda/vm.service.ts",{"_index":551,"title":{},"body":{"injectables/VMService.html":{},"coverage.html":{}}}],["src/core/lambda/vm.service.ts:16",{"_index":553,"title":{},"body":{"injectables/VMService.html":{}}}],["src/core/lambda/vm.service.ts:6",{"_index":552,"title":{},"body":{"injectables/VMService.html":{}}}],["src/core/search/search.controller.ts",{"_index":397,"title":{},"body":{"controllers/SearchController.html":{},"coverage.html":{}}}],["src/core/search/search.controller.ts:11",{"_index":403,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/core/search/search.controller.ts:18",{"_index":407,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/core/template/template.controller.ts",{"_index":418,"title":{},"body":{"controllers/TemplateController.html":{},"coverage.html":{}}}],["src/core/template/template.controller.ts:106",{"_index":430,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:149",{"_index":421,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:156",{"_index":422,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:161",{"_index":423,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:23",{"_index":424,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.controller.ts:68",{"_index":427,"title":{},"body":{"controllers/TemplateController.html":{}}}],["src/core/template/template.service.ts",{"_index":445,"title":{},"body":{"injectables/TemplateService.html":{},"coverage.html":{}}}],["src/core/template/template.service.ts:21",{"_index":460,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:38",{"_index":449,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:44",{"_index":463,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:55",{"_index":452,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:6",{"_index":448,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:63",{"_index":455,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:74",{"_index":454,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/template/template.service.ts:9",{"_index":457,"title":{},"body":{"injectables/TemplateService.html":{}}}],["src/core/transformer/transformer.controller.ts",{"_index":478,"title":{},"body":{"controllers/TransformerController.html":{},"coverage.html":{}}}],["src/core/transformer/transformer.controller.ts:108",{"_index":480,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:117",{"_index":481,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:122",{"_index":482,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:16",{"_index":483,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.controller.ts:55",{"_index":486,"title":{},"body":{"controllers/TransformerController.html":{}}}],["src/core/transformer/transformer.service.ts",{"_index":512,"title":{},"body":{"injectables/TransformerService.html":{},"coverage.html":{}}}],["src/core/transformer/transformer.service.ts:10",{"_index":518,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/core/transformer/transformer.service.ts:24",{"_index":523,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/core/transformer/transformer.service.ts:44",{"_index":520,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/core/transformer/transformer.service.ts:7",{"_index":516,"title":{},"body":{"injectables/TransformerService.html":{}}}],["src/engines/ejs/ejs.service",{"_index":147,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["src/engines/ejs/ejs.service.ts",{"_index":102,"title":{},"body":{"injectables/EjsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/engines/ejs/ejs.service.ts:7",{"_index":109,"title":{},"body":{"injectables/EjsService.html":{}}}],["src/engines/ejs/ejs.service.ts:8",{"_index":110,"title":{},"body":{"injectables/EjsService.html":{}}}],["src/engines/jinja/jinja.service",{"_index":146,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["src/engines/jinja/jinja.service.ts",{"_index":223,"title":{},"body":{"injectables/JinjaService.html":{},"coverage.html":{}}}],["src/engines/jinja/jinja.service.ts:12",{"_index":227,"title":{},"body":{"injectables/JinjaService.html":{}}}],["src/engines/jinja/jinja.service.ts:16",{"_index":228,"title":{},"body":{"injectables/JinjaService.html":{}}}],["src/engines/jinja/jinja.service.ts:5",{"_index":226,"title":{},"body":{"injectables/JinjaService.html":{}}}],["src/engines/jstl/jstl.service",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{}}}],["src/engines/jstl/jstl.service.ts",{"_index":234,"title":{},"body":{"injectables/JsTLService.html":{},"coverage.html":{}}}],["src/engines/jstl/jstl.service.ts:15",{"_index":237,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/engines/jstl/jstl.service.ts:19",{"_index":239,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/engines/jstl/jstl.service.ts:5",{"_index":238,"title":{},"body":{"injectables/JsTLService.html":{}}}],["src/main.ts",{"_index":575,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service.ts",{"_index":367,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:12",{"_index":379,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:13",{"_index":377,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:18",{"_index":375,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/rpc.module.ts",{"_index":389,"title":{},"body":{"modules/RPCModule.html":{}}}],["src/singletonservice.module.ts",{"_index":417,"title":{},"body":{"modules/SingletonServiceModule.html":{}}}],["start",{"_index":344,"title":{},"body":{"controllers/LambdaService.html":{},"index.html":{}}}],["started",{"_index":632,"title":{"index.html":{}},"body":{}}],["starttime",{"_index":348,"title":{},"body":{"controllers/LambdaService.html":{}}}],["statements",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":708,"title":{},"body":{"index.html":{}}}],["statuscode",{"_index":337,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["statusmessage",{"_index":339,"title":{},"body":{"controllers/LambdaService.html":{},"interfaces/RunFeedback.html":{},"controllers/TransformerController.html":{}}}],["string",{"_index":122,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["success",{"_index":501,"title":{},"body":{"controllers/TransformerController.html":{}}}],["successful",{"_index":509,"title":{},"body":{"controllers/TransformerController.html":{}}}],["support",{"_index":710,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":647,"title":{},"body":{"index.html":{}}}],["svg",{"_index":711,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":606,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":197,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["table",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":474,"title":{},"body":{"injectables/TemplateService.html":{}}}],["take",{"_index":465,"title":{},"body":{"injectables/TemplateService.html":{}}}],["template",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"controllers/I18nController.html":{},"injectables/JsTLService.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"index.html":{}}}],["template(userwhereuniqueinput",{"_index":456,"title":{},"body":{"injectables/TemplateService.html":{}}}],["template.bodyi18n",{"_index":185,"title":{},"body":{"controllers/I18nController.html":{}}}],["template.bodyi18n[0].body",{"_index":217,"title":{},"body":{"controllers/I18nController.html":{}}}],["template.meta",{"_index":222,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["template.replace(regex",{"_index":243,"title":{},"body":{"injectables/JsTLService.html":{}}}],["template.service",{"_index":431,"title":{},"body":{"controllers/TemplateController.html":{}}}],["template.transformers",{"_index":192,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["template.type",{"_index":198,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["template/template.service",{"_index":145,"title":{},"body":{"controllers/I18nController.html":{},"controllers/SearchController.html":{}}}],["templatecontroller",{"_index":59,"title":{"controllers/TemplateController.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"coverage.html":{}}}],["templatedata",{"_index":132,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["templatedata.bodyi18n.createmany.data",{"_index":162,"title":{},"body":{"controllers/I18nController.html":{}}}],["templaterdb",{"_index":689,"title":{},"body":{"index.html":{}}}],["templates",{"_index":207,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"index.html":{}}}],["templates(params",{"_index":459,"title":{},"body":{"injectables/TemplateService.html":{}}}],["templateservice",{"_index":50,"title":{"injectables/TemplateService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"coverage.html":{},"overview.html":{}}}],["templatetext",{"_index":121,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{}}}],["templatetype",{"_index":141,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/SampleData.html":{},"controllers/TemplateController.html":{},"index.html":{}}}],["templatetype.ejs",{"_index":205,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["templatetype.jinja",{"_index":200,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["templatetype.js_template_literals",{"_index":202,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["test",{"_index":220,"title":{},"body":{"controllers/I18nController.html":{},"controllers/LambdaController.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"index.html":{}}}],["test(data",{"_index":484,"title":{},"body":{"controllers/TransformerController.html":{}}}],["testdata",{"_index":283,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["testdataprocessresult",{"_index":284,"title":{},"body":{"controllers/LambdaController.html":{}}}],["testdataprocessresult.statuscode",{"_index":288,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.$connect",{"_index":381,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":384,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.ejsservice.render",{"_index":219,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.ejsservice.render(data.body",{"_index":441,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.ejsservice.render(element.body",{"_index":206,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.ejsservice.render(template.body",{"_index":434,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.engine.render(templatetext",{"_index":124,"title":{},"body":{"injectables/EjsService.html":{}}}],["this.getobjpath(path",{"_index":248,"title":{},"body":{"injectables/JsTLService.html":{}}}],["this.interpolate(templatetext",{"_index":257,"title":{},"body":{"injectables/JsTLService.html":{}}}],["this.jinjaservice.render",{"_index":216,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jinjaservice.render(data.body",{"_index":439,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.jinjaservice.render(element.body",{"_index":201,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jinjaservice.render(template.body",{"_index":432,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.jstlservice.render",{"_index":218,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jstlservice.render(data.body",{"_index":440,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.jstlservice.render(element.body",{"_index":203,"title":{},"body":{"controllers/I18nController.html":{}}}],["this.jstlservice.render(template.body",{"_index":433,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.lambdaservice.getlambdafromdid",{"_index":546,"title":{},"body":{"injectables/TransformerService.html":{}}}],["this.lambdaservice.process",{"_index":285,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.lambdaservice.process(lambda",{"_index":281,"title":{},"body":{"controllers/LambdaController.html":{},"injectables/TransformerService.html":{}}}],["this.logger.verbose('prisma",{"_index":382,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.logger.warn('prisma",{"_index":385,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.nunjucks",{"_index":229,"title":{},"body":{"injectables/JinjaService.html":{}}}],["this.nunjucks.configure",{"_index":231,"title":{},"body":{"injectables/JinjaService.html":{}}}],["this.nunjucks.renderstring(templatetext",{"_index":233,"title":{},"body":{"injectables/JinjaService.html":{}}}],["this.prisma.lambda.create",{"_index":289,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.prisma.lambda.delete",{"_index":295,"title":{},"body":{"controllers/LambdaController.html":{}}}],["this.prisma.lambda.findunique",{"_index":279,"title":{},"body":{"controllers/LambdaController.html":{},"controllers/LambdaService.html":{}}}],["this.prisma.template.create",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["this.prisma.template.delete",{"_index":472,"title":{},"body":{"injectables/TemplateService.html":{}}}],["this.prisma.template.findmany",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"injectables/TemplateService.html":{}}}],["this.prisma.template.findunique",{"_index":176,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["this.prisma.template.update",{"_index":471,"title":{},"body":{"injectables/TemplateService.html":{}}}],["this.prisma.transformer.create",{"_index":510,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.prisma.transformer.delete",{"_index":511,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.prisma.transformer.findunique",{"_index":491,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.process(lambda",{"_index":327,"title":{},"body":{"controllers/LambdaService.html":{}}}],["this.processinternalfunction(transformer",{"_index":526,"title":{},"body":{"injectables/TransformerService.html":{}}}],["this.processoptions(transformer",{"_index":525,"title":{},"body":{"injectables/TransformerService.html":{}}}],["this.templateservice.createtemplate(templatedata",{"_index":170,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["this.templateservice.deletetemplate",{"_index":443,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.templateservice.searchbody(querystring.querystring",{"_index":413,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.templateservice.searchtag(querystring.querystring",{"_index":411,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.templateservice.template",{"_index":444,"title":{},"body":{"controllers/TemplateController.html":{}}}],["this.transformerservice.process",{"_index":193,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["this.transformerservice.processinternalfunction",{"_index":497,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.transformerservice.processoptions",{"_index":494,"title":{},"body":{"controllers/TransformerController.html":{}}}],["this.vm",{"_index":317,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{}}}],["this.vm.on('console.log",{"_index":350,"title":{},"body":{"controllers/LambdaService.html":{}}}],["this.vm.run(body",{"_index":359,"title":{},"body":{"controllers/LambdaService.html":{}}}],["though",{"_index":706,"title":{},"body":{"index.html":{}}}],["throw",{"_index":164,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TransformerService.html":{}}}],["todo",{"_index":528,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformeddata",{"_index":190,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer",{"_index":181,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"index.html":{}}}],["transformer.path",{"_index":195,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer.service",{"_index":489,"title":{},"body":{"controllers/TransformerController.html":{}}}],["transformer.transformer",{"_index":194,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer.type",{"_index":492,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["transformer/transformer.service",{"_index":142,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["transformer1",{"_index":676,"title":{},"body":{"index.html":{}}}],["transformer2",{"_index":678,"title":{},"body":{"index.html":{}}}],["transformerconfig",{"_index":521,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformerconfig.functiondid",{"_index":547,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformerconfig.meta.options",{"_index":538,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformercontroller",{"_index":58,"title":{"controllers/TransformerController.html":{}},"body":{"modules/AppModule.html":{},"modules/RPCModule.html":{},"controllers/TransformerController.html":{},"coverage.html":{}}}],["transformers",{"_index":180,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"index.html":{}}}],["transformerservice",{"_index":51,"title":{"injectables/TransformerService.html":{}},"body":{"modules/AppModule.html":{},"controllers/I18nController.html":{},"modules/RPCModule.html":{},"controllers/TemplateController.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"coverage.html":{},"overview.html":{}}}],["transformertype",{"_index":487,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["transformertype.function_external",{"_index":527,"title":{},"body":{"injectables/TransformerService.html":{}}}],["transformertype.function_internal",{"_index":496,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["transformertype.options",{"_index":493,"title":{},"body":{"controllers/TransformerController.html":{},"injectables/TransformerService.html":{}}}],["true",{"_index":159,"title":{},"body":{"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{}}}],["try",{"_index":347,"title":{},"body":{"controllers/LambdaService.html":{},"controllers/TemplateController.html":{}}}],["ts",{"_index":314,"title":{},"body":{"controllers/LambdaService.html":{}}}],["ts.transpile(lambda.body",{"_index":356,"title":{},"body":{"controllers/LambdaService.html":{}}}],["tsconfig.json",{"_index":695,"title":{},"body":{"index.html":{}}}],["type",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/EjsService.html":{},"controllers/I18nController.html":{},"injectables/JinjaService.html":{},"controllers/LambdaController.html":{},"controllers/LambdaService.html":{},"injectables/PrismaService.html":{},"interfaces/RenderDto.html":{},"interfaces/RenderDtoTest.html":{},"interfaces/RenderResponse.html":{},"interfaces/RunFeedback.html":{},"interfaces/SampleData.html":{},"controllers/SearchController.html":{},"controllers/TemplateController.html":{},"injectables/TemplateService.html":{},"controllers/TransformerController.html":{},"injectables/TransformerService.html":{},"injectables/VMService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":724,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":209,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["types/nunjucks",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":115,"title":{},"body":{"injectables/EjsService.html":{}}}],["ui",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["unlicensed",{"_index":722,"title":{},"body":{"properties.html":{}}}],["up",{"_index":687,"title":{},"body":{"index.html":{}}}],["update",{"_index":657,"title":{},"body":{"index.html":{}}}],["updatetemplate",{"_index":447,"title":{},"body":{"injectables/TemplateService.html":{}}}],["updatetemplate(params",{"_index":462,"title":{},"body":{"injectables/TemplateService.html":{}}}],["use",{"_index":640,"title":{},"body":{"index.html":{}}}],["used",{"_index":702,"title":{},"body":{"index.html":{}}}],["userwhereuniqueinput",{"_index":458,"title":{},"body":{"injectables/TemplateService.html":{}}}],["uuid",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["v4",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["valid",{"_index":342,"title":{},"body":{"controllers/LambdaService.html":{}}}],["validate",{"_index":225,"title":{},"body":{"injectables/JinjaService.html":{}}}],["value",{"_index":107,"title":{},"body":{"injectables/EjsService.html":{},"injectables/JinjaService.html":{},"injectables/JsTLService.html":{},"injectables/PrismaService.html":{},"injectables/TransformerService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":117,"title":{},"body":{"injectables/EjsService.html":{},"controllers/I18nController.html":{}}}],["variable",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":240,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/JsTLService.html":{},"miscellaneous/variables.html":{}}}],["verify",{"_index":332,"title":{},"body":{"controllers/LambdaService.html":{}}}],["version",{"_index":719,"title":{},"body":{"properties.html":{}}}],["vm",{"_index":310,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{}}}],["vm.service",{"_index":316,"title":{},"body":{"controllers/LambdaService.html":{}}}],["vm2",{"_index":311,"title":{},"body":{"controllers/LambdaService.html":{},"injectables/VMService.html":{},"dependencies.html":{}}}],["vmservice",{"_index":43,"title":{"injectables/VMService.html":{}},"body":{"modules/AppModule.html":{},"controllers/LambdaService.html":{},"modules/SingletonServiceModule.html":{},"injectables/VMService.html":{},"coverage.html":{},"overview.html":{}}}],["vmservice.vm",{"_index":318,"title":{},"body":{"controllers/LambdaService.html":{}}}],["void",{"_index":554,"title":{},"body":{"injectables/VMService.html":{}}}],["without",{"_index":208,"title":{},"body":{"controllers/I18nController.html":{},"controllers/TemplateController.html":{}}}],["world",{"_index":680,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":644,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/SingletonServiceModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStudent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getStudent\n                        \n                    \n                \n            \n            \n                \ngetStudent(data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('StudentController', 'GetStudent')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { v4 as uuid } from 'uuid';\n\n@Controller()\nexport class AppController {\n  @GrpcMethod('StudentController', 'GetStudent')\n  getStudent(data: any): any {\n    return 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_exports\n\n\n\n\nSingletonServiceModule\n\nSingletonServiceModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nSingletonServiceModule->AppModule\n\n\n\n\n\nVMService \n\nVMService \n\nVMService  -->\n\nAppModule->VMService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuditService\n\nAuditService\n\nAppModule -->\n\nAuditService->AppModule\n\n\n\n\n\nEjsService\n\nEjsService\n\nAppModule -->\n\nEjsService->AppModule\n\n\n\n\n\nJinjaService\n\nJinjaService\n\nAppModule -->\n\nJinjaService->AppModule\n\n\n\n\n\nJsTLService\n\nJsTLService\n\nAppModule -->\n\nJsTLService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTemplateService\n\nTemplateService\n\nAppModule -->\n\nTemplateService->AppModule\n\n\n\n\n\nTransformerService\n\nTransformerService\n\nAppModule -->\n\nTransformerService->AppModule\n\n\n\n\n\nVMService\n\nVMService\n\nAppModule -->\n\nVMService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AuditService\n                        \n                        \n                            EjsService\n                        \n                        \n                            JinjaService\n                        \n                        \n                            JsTLService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            TemplateService\n                        \n                        \n                            TransformerService\n                        \n                        \n                            VMService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LambdaController\n                        \n                        \n                            TransformerController\n                        \n                        \n                            TemplateController\n                        \n                        \n                            LambdaService\n                        \n                        \n                            I18nController\n                        \n                        \n                            SearchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SingletonServiceModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VMService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AppService } from './app.service';\nimport { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from './core/template/template.service';\nimport { AuditService } from './core/audit/audit.service';\nimport { LambdaService } from './core/lambda/lambda.service';\nimport { LambdaController } from './core/lambda/lambda.controller';\nimport { TransformerService } from './core/transformer/transformer.service';\nimport { TransformerController } from './core/transformer/transformer.controller';\nimport { TemplateController } from './core/template/template.controller';\nimport { JinjaService } from './engines/jinja/jinja.service';\nimport { EjsService } from './engines/ejs/ejs.service';\nimport { VMService } from './core/lambda/vm.service';\nimport { SingletonServiceModule } from './singletonService.module';\nimport { I18nController } from './core/i18n/i18n/i18n.controller';\nimport { SearchController } from './core/search/search.controller';\n\n@Module({\n  imports: [SingletonServiceModule],\n  controllers: [\n    LambdaController,\n    TransformerController,\n    TemplateController,\n    LambdaService,\n    I18nController,\n    SearchController,\n  ],\n  exports: [VMService],\n  providers: [\n    AppService,\n    PrismaService,\n    JsTLService,\n    TemplateService,\n    AuditService,\n    LambdaService,\n    TransformerService,\n    JinjaService,\n    EjsService,\n    VMService,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTemplate\n                            \n                            \n                                    Async\n                                getAllTemplates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemplate(data: Prisma.TemplateCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllTemplates\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTemplates()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Prisma, Template } from '@prisma/client';\n\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private prisma: PrismaService) {}\n\n  async getAllTemplates(): Promise {\n    return this.prisma.template.findMany();\n  }\n\n  async createTemplate(data: Prisma.TemplateCreateInput): Promise {\n    return this.prisma.template.create({\n      data,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditService.html":{"url":"injectables/AuditService.html","title":"injectable - AuditService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/audit/audit.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AuditService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EjsService.html":{"url":"injectables/EjsService.html","title":"injectable - EjsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EjsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/engines/ejs/ejs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                engine\n                            \n                            \n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        engine\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : ejs\n                    \n                \n                    \n                        \n                                Defined in src/engines/ejs/ejs.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/ejs/ejs.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst ejs = require('ejs');\n\n@Injectable()\nexport class EjsService {\n  engine: any = ejs;\n  render = (templateText: string, data: any, fallback: string = '') => {\n    return this.engine.render(templateText, data);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/I18nController.html":{"url":"controllers/I18nController.html","title":"controller - I18nController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  I18nController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/i18n/i18n/i18n.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                i18n\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTemplate(templateData: Prisma.TemplateCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/core/i18n/i18n/i18n.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    templateData\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('process')\n                \n            \n\n            \n                \n                    Defined in src/core/i18n/i18n/i18n.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n} from '@nestjs/common';\nimport { Template, TemplateType, Prisma } from '@prisma/client';\nimport { PrismaService } from '../../../prisma.service';\nimport { TransformerService } from '../../transformer/transformer.service';\nimport { RenderDto, RenderResponse } from '../../dto/render';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from '../../template/template.service';\nimport { JinjaService } from 'src/engines/jinja/jinja.service';\nimport { EjsService } from 'src/engines/ejs/ejs.service';\n\n@Controller('i18n')\nexport class I18nController {\n  constructor(\n    private readonly jinjaService: JinjaService,\n    private readonly ejsService: EjsService,\n    private readonly prisma: PrismaService,\n    private readonly transformerService: TransformerService,\n    private readonly templateService: TemplateService,\n    private readonly jstlService: JsTLService,\n  ) {}\n\n  @Post()\n  async addTemplate(\n    @Body() templateData: Prisma.TemplateCreateInput,\n  ): Promise {\n    const hasDuplicate = (arrayObj, colName) => {\n      var hash = Object.create(null);\n      return arrayObj.some((arr) => {\n        return (\n          arr[colName] && (hash[arr[colName]] || !(hash[arr[colName]] = true))\n        );\n      });\n    };\n    const isDuplicate: Boolean = hasDuplicate(\n      templateData.bodyI18n.createMany.data,\n      'lang',\n    );\n    if (isDuplicate) {\n      throw new BadRequestException('Duplicate language codes not allowed');\n    } else {\n      return this.templateService.createTemplate(templateData);\n    }\n  }\n\n  @Post('process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    let processed;\n    let template;\n    if (renderDto.data.lang == null) {\n      processed = [];\n      template = await this.prisma.template.findUnique({\n        where: { id: renderDto.id },\n        include: {\n          transformers: {\n            include: {\n              transformer: true,\n            },\n          },\n          bodyI18n: {\n            select: {\n              body: true,\n              lang: true,\n            },\n          },\n        },\n      });\n      const bodyArr = template.bodyI18n;\n      if (bodyArr.length > 0) {\n        bodyArr.forEach(async (element) => {\n          let transformedData = renderDto.data;\n          for (const transformer of template.transformers) {\n            transformedData = await this.transformerService.process(\n              transformer.transformer,\n              transformedData,\n              transformer.path,\n            );\n          }\n          let proc;\n          switch (template.type) {\n            case TemplateType.JINJA:\n              proc = this.jinjaService.render(element.body, transformedData);\n\n            case TemplateType.JS_TEMPLATE_LITERALS:\n              proc = this.jstlService.render(element.body, transformedData);\n              break;\n\n            case TemplateType.EJS:\n              proc = this.ejsService.render(element.body, transformedData);\n              break;\n            default:\n              throw 'Templates without template types not allowed';\n          }\n          console.log({ lang: element.lang, processed: proc });\n          processed.push({ lang: element.lang, processed: proc });\n        });\n      } else {\n        processed = {\n          err: 'No template found for type ' + renderDto.data.type,\n        };\n      }\n    } else {\n      template = await this.prisma.template.findUnique({\n        where: { id: renderDto.id },\n        include: {\n          transformers: {\n            include: {\n              transformer: true,\n            },\n          },\n          bodyI18n: {\n            where: { lang: renderDto.data.lang },\n          },\n        },\n      });\n      let transformedData = renderDto.data;\n      for (const transformer of template.transformers) {\n        transformedData = await this.transformerService.process(\n          transformer.transformer,\n          transformedData,\n          transformer.path,\n        );\n      }\n      switch (template.type) {\n        case TemplateType.JINJA:\n          processed = this.jinjaService.render(\n            template.bodyI18n[0].body,\n            transformedData,\n          );\n\n        case TemplateType.JS_TEMPLATE_LITERALS:\n          processed = this.jstlService.render(\n            template.bodyI18n[0].body,\n            transformedData,\n          );\n          break;\n\n        case TemplateType.EJS:\n          processed = this.ejsService.render(\n            template.bodyI18n[0].body,\n            transformedData,\n          );\n          break;\n        default:\n          throw 'Templates without template types not allowed';\n      }\n    }\n    return {\n      processed,\n      templateType: TemplateType.JS_TEMPLATE_LITERALS,\n      data: renderDto.data,\n      template: 'test',\n      meta: template.meta,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JinjaService.html":{"url":"injectables/JinjaService.html","title":"injectable - JinjaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JinjaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/engines/jinja/jinja.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nunjucks\n                            \n                            \n                                render\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/engines/jinja/jinja.service.ts:5\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nunjucks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/engines/jinja/jinja.service.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jinja/jinja.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jinja/jinja.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JinjaService {\n  nunjucks: any;\n\n  constructor() {\n    this.nunjucks = require('nunjucks');\n    this.nunjucks.configure({ autoescape: true });\n  }\n\n  render = (templateText: string, data: any, fallback: string = '') => {\n    return this.nunjucks.renderString(templateText, data);\n  };\n\n  validate = (templateText: string): boolean => {\n    return this.nunjucks.renderString(templateText, {});\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JsTLService.html":{"url":"injectables/JsTLService.html","title":"injectable - JsTLService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JsTLService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/engines/jstl/jstl.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getObjPath\n                            \n                            \n                                interpolate\n                            \n                            \n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getObjPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jstl/jstl.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jstl/jstl.service.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/engines/jstl/jstl.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JsTLService {\n  interpolate = (template, variables, fallback) => {\n    console.log({ template, variables, fallback });\n    const regex = /\\${[^{]+}/g;\n    return template.replace(regex, (match) => {\n      const path = match.slice(2, -1).trim();\n      return this.getObjPath(path, variables, fallback);\n    });\n  };\n\n  //get the specified property or nested property of an object\n  getObjPath = (path, obj, fallback = '') => {\n    return path.split('.').reduce((res, key) => res[key] || fallback, obj);\n  };\n\n  render = (templateText: string, data: any, fallback: string = '') => {\n    return this.interpolate(templateText, data, fallback);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LambdaController.html":{"url":"controllers/LambdaController.html","title":"controller - LambdaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LambdaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/lambda.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lambda\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addLambda\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                getTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addLambda\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLambda(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { Template, TemplateType, Prisma, Lambda } from '@prisma/client';\nimport { RenderDto, RenderResponse } from '../dto/render';\nimport { PrismaService } from '../../prisma.service';\nimport { LambdaJustBody, RunFeedback } from './interfaces';\nimport { LambdaService } from './lambda.service';\nimport { GrpcMethod } from '@nestjs/microservices';\n\n@Controller('lambda')\nexport class LambdaController {\n  constructor(\n    private readonly lambdaService: LambdaService,\n    private prisma: PrismaService,\n  ) {}\n\n  @Post('/process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    const lambda = await this.prisma.lambda.findUnique({\n      where: { id: Number(renderDto.id) },\n    });\n    console.log({ lambda });\n    return this.lambdaService.process(lambda, renderDto.data);\n  }\n\n  @Post('/')\n  async addLambda(\n    @Body() data: { lambda: Prisma.LambdaCreateInput; testData: any },\n  ): Promise {\n    const testDataProcessResult = this.lambdaService.process(\n      data.lambda,\n      data.testData,\n    );\n    if (testDataProcessResult.statusCode === 1) {\n      return this.prisma.lambda.create({\n        data: data.lambda,\n      });\n    } else {\n      console.error(\n        \"Can't add lambda, test data failed\",\n        testDataProcessResult,\n      );\n      return testDataProcessResult;\n    }\n  }\n\n  @Delete('/:id')\n  async deleteTemplate(@Param('id') id: string): Promise {\n    return this.prisma.lambda.delete({ where: { id: Number(id) } });\n  }\n\n  @Get('/:id')\n  async getTemplate(@Param('id') id: string): Promise {\n    return this.prisma.lambda.findUnique({ where: { id: Number(id) } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LambdaService.html":{"url":"controllers/LambdaService.html","title":"controller - LambdaService","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LambdaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/lambda.service.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getLambdaFromDID\n                            \n                            \n                                process\n                            \n                            \n                                    Async\n                                processRPC\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLambdaFromDID\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLambdaFromDID(did: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/lambda/lambda.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    did\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        process\n                        \n                    \n                \n            \n            \n                \nprocess(lambda: Lambda | Prisma.LambdaCreateInput | LambdaJustBody, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/lambda/lambda.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lambda\n                                    \n                                                Lambda | Prisma.LambdaCreateInput | LambdaJustBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RunFeedback\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processRPC\n                        \n                    \n                \n            \n            \n                \n                    \n                    processRPC(lambda: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('LambdaService', 'Process')\n                \n            \n\n            \n                \n                    Defined in src/core/lambda/lambda.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lambda\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Injectable } from '@nestjs/common';\nimport { Lambda, Language, Prisma } from '@prisma/client';\nimport { LambdaJustBody, RunFeedback } from './interfaces';\nimport { NodeVM, VM } from 'vm2';\nimport { performance } from 'perf_hooks';\nimport ts = require('typescript');\nimport { PrismaService } from '../../prisma.service';\nimport { GrpcMethod } from '@nestjs/microservices';\nimport { VMService } from './vm.service';\n\n// @Injectable()\n@Controller()\nexport class LambdaService {\n  vm: NodeVM;\n  constructor(private prisma: PrismaService, private vmService: VMService) {\n    this.vm = vmService.vm;\n  }\n\n  async getLambdaFromDID(did: string): Promise {\n    // find lambda by did from Prisma. Example did = 'did:internal:1'\n    // Get the last part of the did\n    const didParts = did.split(':');\n    const id = didParts[didParts.length - 1];\n    return await this.prisma.lambda.findUnique({ where: { id: Number(id) } });\n  }\n\n  @GrpcMethod('LambdaService', 'Process')\n  async processRPC(lambda: {\n    body: string;\n    language: Language;\n    testData: string;\n  }): Promise {\n    const data = await this.process(lambda, JSON.parse(lambda.testData))\n      .response;\n    console.log(data);\n    return {\n      result: data,\n    };\n  }\n\n  process(\n    lambda: Lambda | Prisma.LambdaCreateInput | LambdaJustBody,\n    data: any,\n  ): RunFeedback {\n    // Regex to verify function(data) signature\n    const regex = /^function\\s*\\(([^)]*)\\)\\s*\\{/;\n    const match = regex.exec(lambda.body);\n    if (!match) {\n      return {\n        statusCode: 3,\n        statusMessage:\n          'ERROR: The function signature is not valid. It should be function(data)',\n        error: 'Invalid Lambda. It should start with \"function(data) {\"',\n        response: null,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    } else {\n      try {\n        const startTime = performance.now();\n        const consoleOutput: string[] = [];\n        this.vm.on('console.log', (log) => {\n          consoleOutput.push(JSON.stringify(log));\n        });\n        if (lambda.language === Language.TYPESCRIPT) {\n          lambda.body = ts.transpile(lambda.body);\n        }\n        const body = `module.exports = ${lambda.body}`;\n        const functionInSandbox = this.vm.run(body);\n        const result = functionInSandbox(data);\n        const endTime = performance.now();\n        return {\n          statusCode: 1,\n          statusMessage: 'OK',\n          error: null,\n          response: result,\n          consoleOutput: consoleOutput,\n          executionTimeInMs: endTime - startTime,\n        };\n      } catch (e) {\n        console.error(e);\n        return {\n          statusCode: 0,\n          statusMessage: 'ERROR',\n          error: e.message,\n          response: null,\n          consoleOutput: null,\n          executionTimeInMs: null,\n        };\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PrismaService.name)\n                    \n                \n                    \n                        \n                                Defined in src/prisma.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  Logger,\n  OnModuleInit,\n} from '@nestjs/common';\n\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  private readonly logger = new Logger(PrismaService.name);\n  async onModuleInit() {\n    await this.$connect();\n    this.logger.verbose('Prisma connected');\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      this.logger.warn('Prisma existing');\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RPCModule.html":{"url":"modules/RPCModule.html","title":"module - RPCModule","body":"\n                   \n\n\n\n\n    Modules\n    RPCModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/rpc.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AppService } from './app.service';\nimport { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from './core/template/template.service';\nimport { AuditService } from './core/audit/audit.service';\nimport { LambdaService } from './core/lambda/lambda.service';\nimport { LambdaController } from './core/lambda/lambda.controller';\nimport { TransformerService } from './core/transformer/transformer.service';\nimport { TransformerController } from './core/transformer/transformer.controller';\nimport { TemplateController } from './core/template/template.controller';\nimport { JinjaService } from './engines/jinja/jinja.service';\nimport { EjsService } from './engines/ejs/ejs.service';\nimport { AppController } from './app.controller';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [],\n})\nexport class RPCModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderDto.html":{"url":"interfaces/RenderDto.html","title":"interface - RenderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderDtoTest.html":{"url":"interfaces/RenderDtoTest.html","title":"interface - RenderDtoTest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderDtoTest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            sampleData\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sampleData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sampleData:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     TemplateType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RenderResponse.html":{"url":"interfaces/RenderResponse.html","title":"interface - RenderResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RenderResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            meta\n                                        \n                                \n                                \n                                        \n                                            processed\n                                        \n                                \n                                \n                                        \n                                            template\n                                        \n                                \n                                \n                                        \n                                            templateType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        processed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        processed:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        template\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        template:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        templateType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        templateType:     TemplateType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RunFeedback.html":{"url":"interfaces/RunFeedback.html","title":"interface - RunFeedback","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RunFeedback\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            consoleOutput\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            executionTimeInMs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            response\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            statusMessage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        consoleOutput\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        consoleOutput:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        executionTimeInMs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        executionTimeInMs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Language } from '@prisma/client';\n\nexport interface RunFeedback {\n  statusCode: number;\n  statusMessage: string;\n  error?: string;\n  response?: any;\n  executionTimeInMs: number;\n  consoleOutput: string[];\n}\n\nexport type LambdaJustBody = {\n  body: string;\n  language: Language;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SampleData.html":{"url":"interfaces/SampleData.html","title":"interface - SampleData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SampleData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/dto/render.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateType } from '.prisma/client';\n\nexport interface RenderDto {\n  id: number;\n  data: any;\n  path?: string;\n}\n\nexport interface RenderDtoTest {\n  sampleData: any;\n  body: string;\n  type: TemplateType;\n}\n\nexport interface RenderResponse {\n  processed: string | string[];\n  templateType: TemplateType;\n  data: any;\n  template: string;\n  meta?: any;\n}\n\nexport interface SampleData {\n  data: any;\n  path: string;\n  response: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SearchController.html":{"url":"controllers/SearchController.html","title":"controller - SearchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/search/search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                search\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchTag\n                            \n                            \n                                    Async\n                                searchTemplateBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTag(queryString: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tag')\n                \n            \n\n            \n                \n                    Defined in src/core/search/search.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryString\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchTemplateBody\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTemplateBody(queryString: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('body')\n                \n            \n\n            \n                \n                    Defined in src/core/search/search.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryString\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable prettier/prettier */\nimport { Controller, Get, Query } from '@nestjs/common';\nimport { Template } from '@prisma/client';\nimport { TemplateService } from '../template/template.service';\n\n@Controller('search')\nexport class SearchController {\n  constructor(private readonly templateService: TemplateService) {}\n\n  @Get('tag')\n  async searchTag(\n    @Query() queryString: { queryString: string },\n  ): Promise {\n    return this.templateService.searchTag(queryString.queryString);\n  }\n\n  @Get('body')\n  async searchTemplateBody(\n    @Query() queryString: { queryString: string },\n  ): Promise {\n    console.log({ test: queryString.queryString });\n    return this.templateService.searchBody(queryString.queryString);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SingletonServiceModule.html":{"url":"modules/SingletonServiceModule.html","title":"module - SingletonServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    SingletonServiceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SingletonServiceModule\n\n\n\ncluster_SingletonServiceModule_exports\n\n\n\ncluster_SingletonServiceModule_providers\n\n\n\n\nVMService \n\nVMService \n\n\n\nSingletonServiceModule\n\nSingletonServiceModule\n\nVMService  -->\n\nSingletonServiceModule->VMService \n\n\n\n\n\nVMService\n\nVMService\n\nSingletonServiceModule -->\n\nVMService->SingletonServiceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/singletonService.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VMService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VMService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { VMService } from './core/lambda/vm.service';\n\n@Module({\n  imports: [],\n  controllers: [],\n  exports: [VMService],\n  providers: [VMService],\n})\nexport class SingletonServiceModule {\n  constructor(private vmService: VMService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TemplateController.html":{"url":"controllers/TemplateController.html","title":"controller - TemplateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TemplateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/template/template.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTemplate\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                getTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                            \n                                    Async\n                                renderTest\n                            \n                            \n                                    Async\n                                renderTestMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTemplate(templateData: Prisma.TemplateCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    templateData\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        renderTest\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTest(data: RenderDtoTest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process/test')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                RenderDtoTest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        renderTestMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderTestMany(data: RenderDtoTest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process/testMany')\n                \n            \n\n            \n                \n                    Defined in src/core/template/template.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                RenderDtoTest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { Template, TemplateType, Prisma } from '@prisma/client';\nimport { PrismaService } from '../../prisma.service';\nimport { TransformerService } from '../transformer/transformer.service';\nimport { RenderDto, RenderDtoTest, RenderResponse } from '../dto/render';\nimport { JsTLService } from 'src/engines/jstl/jstl.service';\nimport { TemplateService } from './template.service';\nimport { JinjaService } from 'src/engines/jinja/jinja.service';\nimport { EjsService } from 'src/engines/ejs/ejs.service';\n\n@Controller('/')\nexport class TemplateController {\n  constructor(\n    private readonly jinjaService: JinjaService,\n    private readonly ejsService: EjsService,\n    private readonly prisma: PrismaService,\n    private readonly transformerService: TransformerService,\n    private readonly templateService: TemplateService,\n    private readonly jstlService: JsTLService,\n  ) {}\n\n  @Post('/process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    const template = await this.prisma.template.findUnique({\n      where: { id: renderDto.id },\n      include: {\n        transformers: {\n          include: {\n            transformer: true,\n          },\n        },\n      },\n    });\n    let processed;\n\n    let transformedData = renderDto.data;\n    for (const transformer of template.transformers) {\n      transformedData = await this.transformerService.process(\n        transformer.transformer,\n        transformedData,\n        transformer.path,\n      );\n    }\n    switch (template.type) {\n      case TemplateType.JINJA:\n        processed = this.jinjaService.render(template.body, transformedData);\n\n      case TemplateType.JS_TEMPLATE_LITERALS:\n        processed = this.jstlService.render(template.body, transformedData);\n        break;\n\n      case TemplateType.EJS:\n        processed = this.ejsService.render(template.body, transformedData);\n        break;\n      default:\n        throw 'Templates without template types not allowed';\n    }\n    return {\n      processed,\n      templateType: TemplateType.JS_TEMPLATE_LITERALS,\n      data: renderDto.data,\n      template: 'test',\n      meta: template.meta,\n    };\n  }\n\n  @Post('/process/test')\n  async renderTest(@Body() data: RenderDtoTest): Promise {\n    let processed;\n    let transformedData;\n    try {\n      transformedData = JSON.parse(data.sampleData);\n    } catch (e) {\n      transformedData = data.sampleData;\n    }\n    // for (const transformer of template.transformers) {\n    //   transformedData = await this.transformerService.process(\n    //     transformer.transformer,\n    //     transformedData,\n    //     transformer.path,\n    //   );\n    // }\n    switch (data.type) {\n      case TemplateType.JINJA:\n        processed = this.jinjaService.render(data.body, transformedData);\n\n      case TemplateType.JS_TEMPLATE_LITERALS:\n        processed = this.jstlService.render(data.body, transformedData);\n        break;\n\n      case TemplateType.EJS:\n        processed = this.ejsService.render(data.body, transformedData);\n        break;\n      default:\n        throw 'Templates without template types not allowed';\n    }\n    return {\n      processed,\n      templateType: TemplateType.JS_TEMPLATE_LITERALS,\n      data: data.sampleData,\n      template: 'test',\n    };\n  }\n\n  @Post('/process/testMany')\n  async renderTestMany(@Body() data: RenderDtoTest): Promise {\n    let processed = [];\n    let transformedData;\n    try {\n      transformedData = JSON.parse(data.sampleData);\n    } catch (e) {\n      transformedData = data.sampleData;\n    }\n    for (let i = 0; i  {\n    return this.templateService.createTemplate(templateData);\n  }\n\n  @Delete('/:id')\n  async deleteTemplate(@Param('id') id: string): Promise {\n    return this.templateService.deleteTemplate({ id: Number(id) });\n  }\n\n  @Get('/:id')\n  async getTemplate(@Param('id') id: string): Promise {\n    return this.templateService.template({ id: Number(id) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TemplateService.html":{"url":"injectables/TemplateService.html","title":"injectable - TemplateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TemplateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/template/template.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTemplate\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                searchBody\n                            \n                            \n                                    Async\n                                searchTag\n                            \n                            \n                                    Async\n                                template\n                            \n                            \n                                    Async\n                                templates\n                            \n                            \n                                    Async\n                                updateTemplate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/template/template.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemplate(data: Prisma.TemplateCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.TemplateCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(where: Prisma.TemplateWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.TemplateWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchBody\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchBody(queryString: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryString\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchTag\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchTag(queryString: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryString\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        template\n                        \n                    \n                \n            \n            \n                \n                    \n                    template(userWhereUniqueInput: Prisma.TemplateWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userWhereUniqueInput\n                                    \n                                            Prisma.TemplateWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        templates\n                        \n                    \n                \n            \n            \n                \n                    \n                    templates(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTemplate(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/template/template.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Template, Prisma } from '@prisma/client';\nimport { PrismaService } from '../../prisma.service';\n\n@Injectable()\nexport class TemplateService {\n  constructor(private prisma: PrismaService) {}\n\n  async template(\n    userWhereUniqueInput: Prisma.TemplateWhereUniqueInput,\n  ): Promise {\n    return this.prisma.template.findUnique({\n      where: userWhereUniqueInput,\n      include: {\n        transformers: true,\n        bodyI18n: true,\n      },\n    });\n  }\n\n  async templates(params: {\n    skip?: number;\n    take?: number;\n    cursor?: Prisma.TemplateWhereUniqueInput;\n    where?: Prisma.TemplateWhereInput;\n    orderBy?: Prisma.TemplateOrderByWithRelationInput;\n  }): Promise {\n    const { skip, take, cursor, where, orderBy } = params;\n    return this.prisma.template.findMany({\n      skip,\n      take,\n      cursor,\n      where,\n      orderBy,\n    });\n  }\n\n  async createTemplate(data: Prisma.TemplateCreateInput): Promise {\n    return this.prisma.template.create({\n      data,\n    });\n  }\n\n  async updateTemplate(params: {\n    where: Prisma.TemplateWhereUniqueInput;\n    data: Prisma.TemplateUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.template.update({\n      data,\n      where,\n    });\n  }\n\n  async deleteTemplate(\n    where: Prisma.TemplateWhereUniqueInput,\n  ): Promise {\n    return this.prisma.template.delete({\n      where,\n    });\n  }\n\n  async searchTag(queryString: string): Promise {\n    return this.prisma.template.findMany({\n      take: 200,\n      where: {\n        tag: {\n          has: queryString,\n        },\n      },\n    });\n  }\n\n  async searchBody(queryString: string): Promise {\n    return this.prisma.template.findMany({\n      take: 200,\n      include: {\n        bodyI18n: true,\n      },\n      where: {\n        OR: [\n          {\n            body: {\n              contains: queryString,\n              mode: 'insensitive',\n            },\n          },\n          {\n            bodyI18n: {\n              some: {\n                body: {\n                  contains: queryString,\n                  mode: 'insensitive',\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransformerController.html":{"url":"controllers/TransformerController.html","title":"controller - TransformerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransformerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transformer/transformer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transformer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addLambda\n                            \n                            \n                                    Async\n                                deleteTemplate\n                            \n                            \n                                    Async\n                                getTemplate\n                            \n                            \n                                    Async\n                                render\n                            \n                            \n                                    Async\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addLambda\n                        \n                    \n                \n            \n            \n                \n                    \n                    addLambda(data: Prisma.TransformerCreateInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.TransformerCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTemplate\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTemplate(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(renderDto: RenderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/process')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderDto\n                                    \n                                                RenderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test')\n                \n            \n\n            \n                \n                    Defined in src/core/transformer/transformer.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\nimport { Prisma, Lambda, Transformer, TransformerType } from '@prisma/client';\nimport { RenderDto, SampleData } from '../dto/render';\nimport { RunFeedback } from 'src/core/lambda/interfaces';\nimport { PrismaService } from '../../prisma.service';\nimport { TransformerService } from './transformer.service';\n\n@Controller('transformer')\nexport class TransformerController {\n  constructor(\n    private readonly transformerService: TransformerService,\n    private prisma: PrismaService,\n  ) {}\n\n  @Post('/process')\n  async render(@Body() renderDto: RenderDto): Promise {\n    const transformer = await this.prisma.transformer.findUnique({\n      where: { id: Number(renderDto.id) },\n    });\n    let result;\n    if (transformer.type === TransformerType.OPTIONS) {\n      result = this.transformerService.processOptions(\n        transformer,\n        renderDto.data,\n        renderDto.path,\n      );\n    } else if (transformer.type === TransformerType.FUNCTION_INTERNAL) {\n      result = this.transformerService.processInternalFunction(\n        transformer,\n        renderDto.data,\n        renderDto.path,\n      );\n    } else {\n      // return not implemented as LambdaRunFeedback\n      return {\n        statusCode: 2,\n        statusMessage: 'Transformer type not implemented',\n        error: 'Transformer type not implemented',\n        response: null,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    }\n    return {\n      statusCode: 1,\n      statusMessage: 'SUCCESS',\n      error: null,\n      response: result,\n      executionTimeInMs: 0,\n      consoleOutput: [],\n    };\n  }\n\n  @Post('/test')\n  async test(\n    @Body()\n    data: {\n      transformer: Prisma.TransformerCreateInput;\n      sample: SampleData;\n    },\n  ): Promise {\n    let result;\n    if (data.transformer.type === TransformerType.OPTIONS) {\n      result = this.transformerService.processOptions(\n        data.transformer,\n        data.sample.data,\n        data.sample.path,\n      );\n    } else if (data.transformer.type === TransformerType.FUNCTION_INTERNAL) {\n      result = this.transformerService.processInternalFunction(\n        data.transformer,\n        data.sample.data,\n        data.sample.path,\n      );\n    } else {\n      // return not implemented as LambdaRunFeedback\n      return {\n        statusCode: 2,\n        statusMessage: 'Transformer type not implemented',\n        error: 'Transformer type not implemented',\n        response: null,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    }\n    if (JSON.stringify(result) === JSON.stringify(data.sample.response)) {\n      return {\n        statusCode: 1,\n        statusMessage: 'Test successful',\n        error: null,\n        response: result,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    } else {\n      return {\n        statusCode: 0,\n        statusMessage: 'Test failed',\n        error: 'Test failed',\n        response: result,\n        executionTimeInMs: 0,\n        consoleOutput: [],\n      };\n    }\n  }\n\n  @Post('/')\n  async addLambda(\n    @Body() data: Prisma.TransformerCreateInput,\n  ): Promise {\n    return this.prisma.transformer.create({\n      data,\n    });\n  }\n\n  @Delete('/:id')\n  async deleteTemplate(@Param('id') id: string): Promise {\n    return this.prisma.transformer.delete({ where: { id: Number(id) } });\n  }\n\n  @Get('/:id')\n  async getTemplate(@Param('id') id: string): Promise {\n    return this.prisma.transformer.findUnique({ where: { id: Number(id) } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformerService.html":{"url":"injectables/TransformerService.html","title":"injectable - TransformerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transformer/transformer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                            \n                                    Async\n                                processInternalFunction\n                            \n                            \n                                processOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(lambdaService: LambdaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/transformer/transformer.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        lambdaService\n                                                  \n                                                        \n                                                                        LambdaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                    \n                    process(transformer: Transformer, data: any, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/transformer/transformer.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transformer\n                                    \n                                            Transformer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processInternalFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    processInternalFunction(transformerConfig: literal type, data: any, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/transformer/transformer.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transformerConfig\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processOptions\n                        \n                    \n                \n            \n            \n                \nprocessOptions(transformerConfig: literal type, data: any, path: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/transformer/transformer.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transformerConfig\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Lambda, Transformer } from '@prisma/client';\nimport { TransformerType } from '@prisma/client';\nimport { LambdaService } from '../lambda/lambda.service';\n\n@Injectable()\nexport class TransformerService {\n  constructor(private lambdaService: LambdaService) {}\n\n  async process(\n    transformer: Transformer,\n    data: any,\n    path: string,\n  ): Promise {\n    if (transformer.type === TransformerType.OPTIONS) {\n      return this.processOptions(transformer, data, path);\n    } else if (transformer.type === TransformerType.FUNCTION_INTERNAL) {\n      return this.processInternalFunction(transformer, data, path);\n    } else if (transformer.type === TransformerType.FUNCTION_EXTERNAL) {\n      return data;\n    }\n  }\n\n  processOptions(\n    transformerConfig: {\n      type: TransformerType;\n      meta?: any; // TODO: fix this to accomoactual type: { options: { key: string; value: string }[] };\n      sampleData?: any;\n    },\n    data: any,\n    path: string,\n  ): any {\n    // Replace the field at the path with the value from the options else return the original value\n    const clonedData = JSON.parse(JSON.stringify(data));\n    const field = path.split('.').pop();\n    const options = transformerConfig.meta.options;\n    const option = options.find((o) => o.key === clonedData[field]);\n    if (option) {\n      clonedData[field] = option.value;\n    }\n    return clonedData;\n  }\n\n  async processInternalFunction(\n    transformerConfig: {\n      type: TransformerType;\n      functionDID?: string;\n      sampleData?: any;\n    },\n    data: any,\n    path: string,\n  ): Promise {\n    const clonedData = JSON.parse(JSON.stringify(data));\n    // get lambda by id from the did and run it\n    const lambda = await this.lambdaService.getLambdaFromDID(\n      transformerConfig.functionDID,\n    );\n    if (lambda) {\n      const result = await this.lambdaService.process(lambda, clonedData);\n      if (result.statusCode === 1) {\n        const field = path.split('.').pop();\n        clonedData[field] = result.response;\n      }\n      return clonedData;\n    } else {\n      throw new Error('Lambda not found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VMService.html":{"url":"injectables/VMService.html","title":"injectable - VMService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VMService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/lambda/vm.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                vm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/lambda/vm.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/core/lambda/vm.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        vm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodeVM\n\n                    \n                \n                    \n                        \n                                Defined in src/core/lambda/vm.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { NodeVM, VM } from 'vm2';\n\n@Injectable()\nexport class VMService implements OnModuleInit {\n  vm: NodeVM;\n  constructor() {\n    console.log('VM Initialized Constructor');\n    this.vm = new NodeVM({\n      // console: 'redirect',\n      require: {\n        external: false,\n      },\n    });\n  }\n  onModuleInit() {\n    console.log('VM Initialized');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/audit/audit.service.ts\n            \n            injectable\n            AuditService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            RenderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            RenderDtoTest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            RenderResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/dto/render.ts\n            \n            interface\n            SampleData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/i18n/i18n/i18n.controller.ts\n            \n            controller\n            I18nController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/lambda/interfaces.ts\n            \n            interface\n            RunFeedback\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/lambda/lambda.controller.ts\n            \n            controller\n            LambdaController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/lambda/lambda.service.ts\n            \n            controller\n            LambdaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/lambda/vm.service.ts\n            \n            injectable\n            VMService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/search/search.controller.ts\n            \n            controller\n            SearchController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/template/template.controller.ts\n            \n            controller\n            TemplateController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/template/template.service.ts\n            \n            injectable\n            TemplateService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/transformer/transformer.controller.ts\n            \n            controller\n            TransformerController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/transformer/transformer.service.ts\n            \n            injectable\n            TransformerService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/engines/ejs/ejs.service.ts\n            \n            injectable\n            EjsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/engines/ejs/ejs.service.ts\n            \n            variable\n            ejs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/engines/jinja/jinja.service.ts\n            \n            injectable\n            JinjaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/engines/jstl/jstl.service.ts\n            \n            injectable\n            JsTLService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @grpc/grpc-js : ^1.6.7\n        \n            @grpc/proto-loader : ^0.6.9\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.4.4\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/platform-fastify : ^8.2.6\n        \n            @nestjs/swagger : ^5.1.5\n        \n            @prisma/client : 4.3.1\n        \n            @types/nunjucks : ^3.2.1\n        \n            ejs : ^3.1.6\n        \n            fastify-cors : ^6.0.3\n        \n            fastify-swagger : ^4.15.0\n        \n            json-bigint : ^1.0.0\n        \n            nunjucks : ^3.2.3\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : 4.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.1.6\n        \n            vm2 : ^3.9.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nTemplates as a service.\n\nAPIs to CRUD Templates\nRender(substitute) data in a template.\n\nFeel free to use this as a config manager.\nInstallation\n$ yarn installTemplating languages supported\n\nJavascript Literals + JSON\nJinja (Coming Soon)\n\nAbbreviations\n\nJSTL = Javascript Template Literals.\n\nRunning Migrations\n\nUpdate the schema in schema.prisma.\nRun prisma migrate dev\n\nTransformer Spec\n{\n    path: \"data.username\",\n    type: \"options\", //enum => options, function\n    meta: {\n        options: [\n            {\n                key: 1,\n                value: \"cloudfunctions.googleapis.com\"\n            },\n            {\n                key: 2,\n                value: \"cloudbuild.googleapis.com\"\n            }\n        ]\n    },\n    sampleData: {}\n}Notes\nPublic API Docs for Commenting\n{\n  \"data\": {\n    \"field1\": \"f1\",\n    \"field1\": \"f2\"\n  },\n  \"transformers\": [\n    {\n      \"path\": \"data.field1\",\n      \"transformer\": \"transformer1\"\n    },\n    {\n      \"path\": \"data.field2\",\n      \"transformer\": \"transformer2\"\n    }\n  ],\n  \"meta\": {},\n  \"body\": \"Hello World\",\n  \"templateType\": \"JSTL\"\n}Dev Setup\n\nStart the database and gql server - docker-compose up -d templaterdb gql\nMigrate -prisma migrate dev\nGenerating docs when you are done - npx @compodoc/compodoc -p tsconfig.json -s\nGenerating Swagger docs - `\n\ngRPC\nPostman can send gRPC requests now. This can be used to test the gRPC server. It doesn't allow to share though.\n\nDeployment status\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RPCModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SingletonServiceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nSingletonServiceModule\n\nSingletonServiceModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nSingletonServiceModule->AppModule\n\n\n\n\n\nVMService \n\nVMService \n\nVMService  -->\n\nSingletonServiceModule->VMService \n\n\n\nVMService  -->\n\nAppModule->VMService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuditService\n\nAuditService\n\nAppModule -->\n\nAuditService->AppModule\n\n\n\n\n\nEjsService\n\nEjsService\n\nAppModule -->\n\nEjsService->AppModule\n\n\n\n\n\nJinjaService\n\nJinjaService\n\nAppModule -->\n\nJinjaService->AppModule\n\n\n\n\n\nJsTLService\n\nJsTLService\n\nAppModule -->\n\nJsTLService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nTemplateService\n\nTemplateService\n\nAppModule -->\n\nTemplateService->AppModule\n\n\n\n\n\nTransformerService\n\nTransformerService\n\nAppModule -->\n\nTransformerService->AppModule\n\n\n\n\n\nVMService\n\nVMService\n\nSingletonServiceModule -->\n\nVMService->SingletonServiceModule\n\n\n\nAppModule -->\n\nVMService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LambdaJustBody   (src/.../interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/lambda/interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    LambdaJustBody\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ejs   (src/.../ejs.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/engines/ejs/ejs.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ejs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('ejs')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
